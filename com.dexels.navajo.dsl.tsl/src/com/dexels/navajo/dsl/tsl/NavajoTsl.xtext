//grammar com.dexels.navajo.dsl.tsl.Tsl with org.eclipse.xtext.common.Terminals //with com.dexels.navajo.dsl.expression.NavajoExpression
grammar com.dexels.navajo.dsl.tsl.Tsl with com.dexels.navajo.dsl.expression.NavajoExpression hidden(WS, XMLCOMMENT)

//import "platform:/resource/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
//import "http://www.dexels.com/navajo/dsl/expression/NavajoExpression" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.tsl.model/model/NavaScript.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


//xsi:noNamespaceSchemaLocation
Tml :
	{Tml}
	XMLHEAD?
	LT (TSLTAG | NAVASCRIPTTAG)  (
		(NOTES EQUALS QUOTE Garbage QUOTE)?
	&	(REPOSITORY EQUALS QUOTE Garbage QUOTE)?
	&	(IDTAG EQUALS QUOTE Garbage QUOTE)?
	&	(AUTHOR EQUALS QUOTE Garbage QUOTE)?
	&	(XMLNS EQUALS QUOTE Garbage QUOTE)?
	&	(XMLNS COLON ID EQUALS QUOTE Garbage QUOTE)?
	&	(ID COLON SCHEMALOCATION EQUALS QUOTE Garbage QUOTE)?
	&	(ID COLON NONAMESPACESCHEMALOCATION EQUALS QUOTE Garbage QUOTE)?
	&	(XMLNS EQUALS QUOTE Garbage QUOTE)?
	) 
	(
		(GT 
			((children+=Message) | (children+=Map)| (children+=Param) | (methods += Methods) | (children+=DebugTag)| (children+=Include) | (children+=Validations) | (children+=CommentClause))*
		NAVASCRIPT_END
		)
	|	(
		XML_TAG_SINGLEEND
		)
	);


terminal XMLHEAD: '<?' -> '?>';
terminal XMLCOMMENT: '<!--' -> '-->';
//terminal QUOTEQ: '"=';	
//terminal SEMICOLONQUOTE: ';"';



terminal LT: '<' ;
terminal NAVASCRIPTTAG: 'navascript' ;
terminal TSLTAG: 'tsl' ;

//terminal NAVASCRIPT_START:
//	'<navascript';

terminal QUOTE:
	'"'
;

terminal NAME:
	'name'
;

terminal NOTES:
	'notes';
terminal IDTAG:
	'id';
terminal REPOSITORY:
	'repository';
terminal AUTHOR:
	'author';
terminal XMLNS:
	'xmlns';
terminal SCHEMALOCATION:
	'schemaLocation';
terminal NONAMESPACESCHEMALOCATION:
	'noNamespaceSchemaLocation';
terminal SEMICOLON:
	';';

terminal TYPE:
	'type'
;
terminal MODE:
	'mode'
;
terminal SCRIPT:
	'script'
;


terminal CONDITION:
	'condition'
;
terminal FILTER:
	'filter'
;
terminal OBJECT:
	'object'
;
terminal COUNT:
	'count'
;
terminal REF:
	'ref'
;
terminal LENGTH:
	'length'
;
terminal CARDINALITY:
	'cardinality'
;
terminal SUBTYPES:
	'subtypes'
;
terminal DIRECTION:
	'direction'
;
terminal DESCRIPTION:
	'description'
;

terminal VALUE:
	'value'
;

terminal XMLSPACE:
	'xml:space'
;

terminal PRESERVE:
	'preserve'
;

terminal COMMENT:
	'comment'
;



terminal XML_START_ENDTAG:
	'</'
;
	
terminal GT: 
	'>'
;

terminal XML_TAG_SINGLEEND: 
	'/>'
;

//terminal MAP_METHOD_STARTTAG_START: '<_';
//terminal MAP_METHOD_ENDTAG_START: '</_';


//terminal XML_TAG_START: '<';



terminal MAPTAG: 
	'map' 
;



terminal INCLUDETAG:
	 'include'
;

terminal PROPERTYTAG:
	 'property'
;

terminal REQUIREDTAG:
	 'required'
;

terminal VALIDATIONSTAG:
	 'validations'
;
terminal CHECKTAG:
	 'check'
;

terminal BREAKTAG:
	 'break'
;

terminal OPTIONTAG:
	 'option'
;

terminal EQUALS:
	'='
;

terminal EXPRESSION_TAG:
	 'expression'
;

terminal EXPRESSION_END_TAG:
	 '</expression' GT
;
terminal PARAMTAG:
	 'param'
;

terminal MESSAGETAG:
	'message'
;

terminal METHODTAG:
	 'method'
;

terminal METHODSTAG:
	 'methods'
;

terminal FIELDTAG:
	 'field'
;
terminal DEBUG_TAG:
	 'debug'
;

terminal  NAVASCRIPT_END:
 	//XML_START_ENDTAG NAVASCRIPT_KEYWORD GT;
	('</navascript' GT ) | ('</tsl' GT)
	;
	

Garbage returns ecore::EString:
	(ID|DOT|PARENT|DOLLAR|TML_SEPARATOR|NUMBER|COMMA|SQBRACKET_OPEN|SQBRACKET_CLOSE|AT|COLON|BRACKET_OPEN|BRACKET_CLOSE|TML_EXISTS|EQUALS|NEQUALS|PLUS|MINUS|MULTIPLY|SEMICOLON|TSLTAG|NAVASCRIPTTAG)*
	;

	

// might need to add a lot more kywords here 'message' | 'comment' 
AttributeName:
	ID ;



Expression returns PossibleExpression:
	key=ID EQUALS QUOTE expressionValue=TopLevel endToken=QUOTE
	;
	
NonExpression returns PossibleExpression :
	(namespace= ID COLON)? key=AttributeName EQUALS
	(
		QUOTE value=Garbage QUOTE
	)
;

Methods :
	LT METHODSTAG {Methods} 
	
	((splitTag?=GT
	(method+=Method)*
	closedTag?=XML_START_ENDTAG METHODSTAG GT)
	|
	XML_TAG_SINGLEEND)
	;
	
Method:
	LT METHODTAG {Method}  (attributes+=NonExpression)* 
	
	((splitTag?=GT
		(children+=Required)*
	closedTag?=XML_START_ENDTAG METHODTAG GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	

Validations :
	LT VALIDATIONSTAG {Validations} 
	
	((splitTag?=GT
	( children+=Check)*
	closedTag?=XML_START_ENDTAG VALIDATIONSTAG GT)
	|
	XML_TAG_SINGLEEND)
	;
	
Check:
	LT CHECKTAG {Check}  (attributes+=NonExpression)* 
	
	((splitTag?=GT
		expression=TopLevel
	closedTag?=XML_START_ENDTAG CHECKTAG GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
	
CommentClause returns Comment:
	LT COMMENT {Comment}  (attributes+=Expression)* 
	
	((splitTag ?= GT
	closedTag?=XML_START_ENDTAG COMMENT GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
Break:
	LT BREAKTAG {Break}  (attributes+=Expression)* 
	 
	((splitTag ?= GT
//		expression=TopLevel
		closedTag?= BREAKTAG GT
	)
	|
	XML_TAG_SINGLEEND
	)
	;	

FilePath returns ecore::EString:
	(TML_SEPARATOR | PARENT | DOT | ID)+
;
// create Include entity in Model
Include returns Method:
	LT INCLUDETAG {Method}  
		(SCRIPT EQUALS QUOTE (path+=PathElement)+ QUOTE )?
		(( splitTag?=GT closedTag?=INCLUDETAG) |
	XML_TAG_SINGLEEND)
	;	



Message:
	LT MESSAGETAG {Message} ((COUNT EQUALS QUOTE count=NUMBER QUOTE)? & (MODE EQUALS QUOTE mode=ID QUOTE)? & (NAME EQUALS QUOTE nameAttribute=ID QUOTE)? & (TYPE EQUALS QUOTE type=ID QUOTE)? & (CONDITION EQUALS QUOTE condition=TopLevel QUOTE)?) 
	
	((splitTag?=GT
		((children+=Message) | (children+=Property) | (children+=Param)  | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=CommentClause) | (children+=Break))*
	XML_START_ENDTAG closedTag ?= MESSAGETAG GT
	)
	| 
	XML_TAG_SINGLEEND
	)
	;




Map returns Map:
	LT MAPTAG {Map}
	(DOT mapName=MapId)?
	((REF EQUALS QUOTE (ref+=PathElement)+ QUOTE)?
	& (OBJECT EQUALS QUOTE (object+=PathElement)+ QUOTE)?
	& (NAME EQUALS QUOTE nameAttribute=ID QUOTE)?
	& (FILTER EQUALS QUOTE filter=TopLevel QUOTE)?)
	(XML_TAG_SINGLEEND
	|
		(GT 
			(
				(children+=Message) | 
				(children+=Property) | 
				(children+=Param) | 
				(children+=Map) | 
				(children+=MapMethod) |
				(children+=DebugTag) | 
				(children+=Field) | 
				(children+=CommentClause) | 
				(children+=Break)
			)*
			XML_START_ENDTAG MAPTAG (DOT mapClosingName=MapId)? closedTag?=GT
		)
	);
	
MapId:
	ID;

Required: 
	LT REQUIREDTAG {Required} (attributes+=NonExpression)*
	(
		(XML_TAG_SINGLEEND)
	|
		( splitTag?=GT 	
			closedTag ?= XML_START_ENDTAG REQUIREDTAG GT
		)
	);
	

	
Property:
	LT PROPERTYTAG {Property} ( (DESCRIPTION EQUALS QUOTE description=Garbage QUOTE)? &  (LENGTH EQUALS QUOTE length=NUMBER QUOTE)? & (CARDINALITY EQUALS QUOTE cardinality=ID QUOTE)? & (DIRECTION EQUALS QUOTE direction=ID QUOTE)? & (SUBTYPES EQUALS QUOTE subtypes=ID QUOTE)? & (NAME EQUALS QUOTE nameAttribute=ID QUOTE)? & (TYPE EQUALS QUOTE type=ID QUOTE)? & (CONDITION EQUALS QUOTE condition=TopLevel QUOTE)?) 

	(
		(XML_TAG_SINGLEEND)
	|
		( splitTag?=GT 	 
			(
				children += ExpressionOrOption
				|
				children += Map
		 	)*
		closedTag ?= XML_START_ENDTAG PROPERTYTAG GT
		)
	);

Param returns Param:
	LT PARAMTAG {Param} ( (NAME EQUALS QUOTE nameAttribute=ID QUOTE)? & (TYPE EQUALS QUOTE type=ID QUOTE)? & (CONDITION EQUALS QUOTE condition=TopLevel QUOTE)?) 
	(
		(XML_TAG_SINGLEEND)
	|
		( splitTag?=GT 	
			((children += ExpressionOrOption) | (children+=Map))*
		XML_START_ENDTAG closedTag ?= PARAMTAG GT
		)
	);

MapMethod returns MapMethod:
	LT  mapName = ID DOT methodName= ID (attributes+=Expression)* 
	(
		(XML_TAG_SINGLEEND)
	|
		( splitTag?=GT 
			((
				(children += ExpressionOrOption) | (children+=Message) | (children+=Property) | (children+=Param) | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=CommentClause) | (children+=Break)
			)*
			)
			closedTag ?= XML_START_ENDTAG methodClosingName = ID DOT methodClosingMethod = ID GT
		)
	)
	;
	
Field returns Field: 
	LT FIELDTAG {Field} ( (NAME EQUALS QUOTE nameAttribute=ID QUOTE)? & (COMMENT EQUALS QUOTE comment= Garbage QUOTE)? & (TYPE EQUALS QUOTE type=ID QUOTE)? & (CONDITION EQUALS QUOTE condition=TopLevel QUOTE)?  & (FILTER EQUALS QUOTE filter=TopLevel QUOTE)?) 

	(
	 XML_TAG_SINGLEEND
	 |
	 ( splitTag?=GT
		((children += ExpressionOrOption)  | (children+=Param) | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=CommentClause) | (children+=Break))*
	 )
	 XML_START_ENDTAG closedTag ?= FIELDTAG GT
	)
;

DebugTag returns DebugTag:
	LT DEBUG_TAG {DebugTag} ((VALUE EQUALS value = TopLevel)?  (CONDITION EQUALS QUOTE condition=TopLevel QUOTE)?)
	(
		(XML_TAG_SINGLEEND)
	|
		( splitTag?=GT 	
			(expression=TopLevel)?
		XML_START_ENDTAG closedTag ?= DEBUG_TAG GT
		)
	)	
	;	

ExpressionOrOption returns Element:
		LT EXPRESSION_TAG ExpressionTag
		|
		LT OPTIONTAG Option
		
		
;


ExpressionTag returns ExpressionTag:
	
	{ExpressionTag} ((VALUE EQUALS QUOTE (value = TopLevel)? QUOTE)?  & (CONDITION EQUALS QUOTE (condition=TopLevel)? QUOTE)? & (XMLSPACE EQUALS QUOTE PRESERVE QUOTE)?)

	(
		XML_TAG_SINGLEEND
	|
		( splitTag?=GT 	
			content=Garbage
		    closedTag ?= EXPRESSION_END_TAG
		)
	)	
	;	
	
Option: 
	 LT OPTIONTAG {Option} (attributes+=NonExpression)*
	(
		XML_TAG_SINGLEEND
	|
		( splitTag?=GT 	
		 XML_START_ENDTAG closedTag ?= OPTIONTAG GT
		)
	);
	

	