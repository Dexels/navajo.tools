//grammar com.dexels.navajo.dsl.tsl.Tsl with org.eclipse.xtext.common.Terminals //with com.dexels.navajo.dsl.expression.NavajoExpression
grammar com.dexels.navajo.dsl.tsl.Tsl with com.dexels.navajo.dsl.expression.NavajoExpression hidden(WS, XMLCOMMENT)

//import "platform:/resource/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
//import "http://www.dexels.com/navajo/dsl/expression/NavajoExpression" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.tsl.model/model/NavaScript.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


//xsi:noNamespaceSchemaLocation
Tml :
	{Tml}
	XMLHEAD?
	(LTTSLTAG | LTNAVASCRIPTTAG)  (
		(NOTESEQ QUOTE AnyUntilQuote QUOTE)?
	&	(REPOSITORYEQ QUOTE AnyUntilQuote QUOTE)?
	&	(IDEQ QUOTE AnyUntilQuote QUOTE)?
	&	(AUTHOREQ QUOTE AnyUntilQuote QUOTE)?
	&	(XMLNS EQUALS QUOTE AnyUntilQuote QUOTE)?
	&	(XMLNS COLON ID EQUALS QUOTE AnyUntilQuote QUOTE)?
	&	(ID COLON SCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?
	&	(ID COLON NONAMESPACESCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?
	) 
	(
		(GT 
			((children+=Message) | (children+=MapMethod)| (children+=Param) | (methods += Methods) | (children+=DebugTag)| (children+=Include) | (children+=Validations) | (children+=CommentClause))*
		NAVASCRIPT_END
		)
	|	(
		XML_TAG_SINGLEEND
		)
	);


terminal XMLHEAD: '<?' -> '?>';
terminal XMLCOMMENT: '<!--' -> '-->';
//terminal QUOTEQ: '"=';	
//terminal SEMICOLONQUOTE: ';"';

terminal LT:
	'<';


terminal LTNAVASCRIPTTAG: '<navascript' ;
terminal LTSNAVASCRIPTTAG: '</navascript' ;
terminal LTTSLTAG: '<tsl' ;
terminal LTSTSLTAG: '</tsl' ;

//terminal NAVASCRIPT_START:
//	'<navascript';
terminal QUOTE:
	'"'
;
terminal NAMEEQ:
	'name='
;

terminal NOTESEQ:
	'notes=';
terminal IDEQ:
	'id=';
terminal REPOSITORYEQ:
	'repository=';
terminal AUTHOREQ:
	'author=';
terminal XMLNS:
	'xmlns';
terminal SCHEMALOCATIONEQ:
	'schemaLocation=';
terminal NONAMESPACESCHEMALOCATIONEQ:
	'noNamespaceSchemaLocation=';

terminal TYPEEQ:
	'type='
;
terminal MODEEQ:
	'mode='
;
terminal SCRIPTEQ:
	'script='
;


terminal CONDITIONEQ:
	'condition='
;
terminal FILTEREQ:
	'filter='
;
terminal OBJECTEQ:
	'object='
;
terminal COUNTEQ:
	'count='
;
terminal REFEQ:
	'ref='
;
terminal LENGTHEQ:
	'length='
;
terminal CARDINALITYEQ:
	'cardinality='
;
terminal SUBTYPESEQ:
	'subtypes='
;
terminal DIRECTIONEQ:
	'direction='
;
terminal DESCRIPTIONEQ:
	'description='
;

terminal CODEEQ:
	'code='
;


terminal VALUEEQ:
	'value='
;

terminal XMLSPACE:
	'xml:space'
;

terminal PRESERVE:
	'preserve'
;

terminal COMMENTEQ:
	'comment='
;
terminal LTCOMMENT:
	'<comment'
;
terminal LTSCOMMENT:
	'</comment'
;



terminal XML_START_ENDTAG:
	'</'
;
	
terminal GT: 
	'>'
;

terminal XML_TAG_SINGLEEND: 
	'/>'
;

//terminal MAP_METHOD_STARTTAG_START: '<_';
//terminal MAP_METHOD_ENDTAG_START: '</_';


//terminal XML_TAG_START: '<';

terminal LTINCLUDETAG:
	 '<include'
;
terminal LTSINCLUDETAG:
	 '</include'
;

terminal LTPROPERTYTAG:
	 '<property'
;
terminal LTSPROPERTYTAG:
	 '</property'
;

terminal LTREQUIREDTAG:
	 '<required'
;
terminal LTSREQUIREDTAG:
	 '</required'
;

terminal LTVALIDATIONSTAG:
	 '<validations'
;
terminal LTSVALIDATIONSTAG:
	 '</validations'
;

terminal LTCHECKTAG:
	 '<check'
;
terminal LTSCHECKTAG:
	 '</check'
;

terminal LTBREAKTAG:
	 '<break'
;
terminal LTSBREAKTAG:
	 '</break'
;

terminal LTOPTIONTAG:
	 '<option'
;
terminal LTSOPTIONTAG:
	 '</option'
;

terminal EQUALS:
	'='
;

terminal LTEXPRESSION_TAG:
	 '<expression'
;

terminal EXPRESSION_END_TAG:
	 '</expression' GT
;
terminal LTPARAMTAG:
	 '<param'
;
terminal LTSPARAMTAG:
	 '</param'
;

terminal MESSAGEEQ:
	'message='
;

terminal LTMESSAGETAG:
	'<message'
;
terminal LTSMESSAGETAG:
	'</message'
;

terminal LTMETHODTAG:
	 '<method'
;
terminal LTSMETHODTAG:
	 '</method'
;

AnyContent:
	AnyExpression |
	QUOTE |
	EQUALS
;

AnyUntilQuote:
	(AnyContent
	)*
;


terminal LTMETHODSTAG:
	 '<methods'
;
terminal LTSMETHODSTAG:
	 '</methods'
;

terminal LTFIELDTAG:
	 '<field'
;
terminal LTSFIELDTAG:
	 '</field'
;

terminal LTDEBUG_TAG:
	 '<debug'
;
terminal LTSDEBUG_TAG:
	 '</debug'
;

terminal  NAVASCRIPT_END:
 	//XML_START_ENDTAG NAVASCRIPT_KEYWORD GT;
	(LTSNAVASCRIPTTAG GT ) | (LTSTSLTAG GT)
	;
	
//
//Garbage returns ecore::EString:
//	(ID|DOT|PARENT|DOLLAR|TML_SEPARATOR|NUMBER|COMMA|SQBRACKET_OPEN|SQBRACKET_CLOSE|AT|COLON|BRACKET_OPEN|BRACKET_CLOSE|TML_EXISTS|EQUALS|NEQUALS|PLUS|MINUS|MULTIPLY|SEMICOLON)*
//	;

	

// might need to add a lot more kywords here 'message' | 'comment' 
AttributeName:
	ID ;



Expression returns PossibleExpression:
	key=ID EQUALS QUOTE expressionValue=TopLevel endToken=QUOTE
	;
	
NonExpression returns PossibleExpression :
	(namespace= ID COLON)? key=AttributeName EQUALS
	(
		QUOTE (AnyExpression|EXPRESSION_END_TAG)* QUOTE
	)
;

Methods :
	LTMETHODSTAG {Methods} 
	
	((GT
	(method+=Method)*
	LTSMETHODSTAG GT)
	|
	XML_TAG_SINGLEEND)
	;
	
Method:
	LTMETHODTAG {Method}  ( (NAMEEQ QUOTE nameAttribute=ID QUOTE)?) 
	
	((GT
		(children+=Required)*
	closedTag?=LTSMETHODTAG GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	

Validations :
	LTVALIDATIONSTAG {Validations} 
	
	((GT
	( children+=Check)*
	closedTag?=LTSVALIDATIONSTAG GT)
	|
	XML_TAG_SINGLEEND)
	;
	
Check:
	LTCHECKTAG {Check}  (
		
		  (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		& (DESCRIPTIONEQ QUOTE expressions+=TopLevel QUOTE)?
		& (CODEEQ QUOTE expressions+=TopLevel QUOTE)?
	) 
	
	((GT
		expression=TopLevel
	closedTag?=LTSCHECKTAG GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
	
CommentClause returns Comment:
	LTCOMMENT {Comment}  (attributes+=Expression)* 
	
	((GT
	closedTag?=LTSCOMMENT GT)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
Break:
	LTBREAKTAG {Break}  (attributes+=Expression)* 
	 
	((GT
//		expression=TopLevel
		LTSBREAKTAG GT
	)
	|
	XML_TAG_SINGLEEND
	)
	;	

FilePath returns ecore::EString:
	(TML_SEPARATOR | PARENT | DOT | ID)+
;
// create Include entity in Model
Include returns Method:
	LTINCLUDETAG {Method}  
		(SCRIPTEQ QUOTE AnyUntilQuote QUOTE )?
		(( LTSINCLUDETAG) |
	XML_TAG_SINGLEEND)
	;	



Message:
	LTMESSAGETAG {Message} (
		(COUNTEQ QUOTE count=NUMBER QUOTE)? 
		& (MODEEQ QUOTE mode=ID QUOTE)? 
		& (NAMEEQ QUOTE nameAttribute=ID QUOTE)? 
		& (TYPEEQ QUOTE type=ID QUOTE)? 
		& (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
	) 
	
	(
		(GT
		(
			(children+=Message) | 
			(children+=Property) | 
			(children+=Param)  |
			(children+=MapMethod) | 
			(children+=DebugTag) | 
			(children+=Field) | 
			(children+=CommentClause) | 
			(children+=Break)
		)*
	LTSMESSAGETAG GT
	)
	| 
	XML_TAG_SINGLEEND
	)
	;




	
MapId:
	ID;

Required: 
	LTREQUIREDTAG {Required} ( (MESSAGEEQ QUOTE nameAttribute=ID QUOTE)? )
	(
		(XML_TAG_SINGLEEND)
	|
		( GT 	
			LTSREQUIREDTAG GT
		)
	);
	

	
Property:
	LTPROPERTYTAG {Property} ( (DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)? &  (LENGTHEQ QUOTE length=NUMBER QUOTE)? & (CARDINALITYEQ QUOTE cardinality=(ID | PLUS) QUOTE)? & (DIRECTIONEQ QUOTE direction=ID QUOTE)? & (SUBTYPESEQ QUOTE subtypes=ID QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)? & (VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?) 

	(
		(XML_TAG_SINGLEEND)
	|
		( GT 	 
			(
				children += ExpressionOrOption
				|
				children += MapMethod
		 	)*
		LTSPROPERTYTAG GT
		)
	);

Param returns Param:
	LTPARAMTAG {Param} ( (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) 
	(
		(XML_TAG_SINGLEEND)
	|
		( GT 	
			(
				children += ExpressionOrOption
				|
				children += MapMethod
		 	)*
		LTSPARAMTAG GT
		)
	);

MapMethod returns MapMethod:
	LT methodName=ID DOT ID
	  
		(
		  (ID EQUALS QUOTE expressions+=TopLevel QUOTE)*
		& (NAMEEQ QUOTE expressions+=TopLevel QUOTE)?
		& (FILTEREQ QUOTE filter=TopLevel QUOTE)?
		& (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		& (VALUEEQ QUOTE expressions+=TopLevel QUOTE)?
		& (MESSAGEEQ QUOTE expressions+=TopLevel QUOTE)?
		& (REPOSITORYEQ QUOTE expressions+=TopLevel QUOTE)?
		& (SUBTYPESEQ QUOTE expressions+=TopLevel QUOTE)?
		& (AUTHOREQ QUOTE expressions+=TopLevel QUOTE)?
		& (DIRECTIONEQ QUOTE expressions+=TopLevel QUOTE)?
		& (CARDINALITYEQ QUOTE expressions+=TopLevel QUOTE)?
		& (NOTESEQ QUOTE expressions+=TopLevel QUOTE)?
		& (SCRIPTEQ QUOTE expressions+=TopLevel QUOTE)?
		& (DESCRIPTIONEQ QUOTE expressions+=TopLevel QUOTE)?
		& (CODEEQ QUOTE expressions+=TopLevel QUOTE)?
		& (MODEEQ QUOTE expressions+=TopLevel QUOTE)?
		& (COMMENTEQ QUOTE expressions+=TopLevel QUOTE)?
		& (COUNTEQ QUOTE expressions+=TopLevel QUOTE)?
		& (LENGTHEQ QUOTE expressions+=TopLevel QUOTE)?
		& (XMLSPACE EQUALS QUOTE PRESERVE QUOTE)?
	)
	
	(
		(XML_TAG_SINGLEEND)
	|
		( GT 
			((
				(children += ExpressionOrOption) | (children+=Message) | (children+=Property) | (children+=Param) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=CommentClause) | (children+=Break) | (content+=AnyContent)
			)*
			)
			closedTag ?= XML_START_ENDTAG methodClosingName = ID DOT methodClosingMethod = ID GT
		)
	)
	;
	
Field returns Field: 
	LTFIELDTAG {Field} ( (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (COMMENTEQ QUOTE comment= AnyUntilQuote QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?  & (FILTEREQ QUOTE filter=TopLevel QUOTE)?) 

	(
	 XML_TAG_SINGLEEND
	 |
	 ( GT
		((children += ExpressionOrOption)  | (children+=Param) | (children+=MapMethod) | (children+=DebugTag) | (children+=CommentClause) | (children+=Break))*
	 )
	 LTSFIELDTAG GT
	)
;

DebugTag returns DebugTag:
	LTDEBUG_TAG {DebugTag} ((VALUEEQ value = TopLevel)?  (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?)
	(
		(XML_TAG_SINGLEEND)
	|
		( GT 	
			(expression=TopLevel)?
		LTSDEBUG_TAG GT
		)
	)	
	;	

ExpressionOrOption returns Element:
		LTEXPRESSION_TAG ExpressionTag
		|
		Option
		
		
;


ExpressionTag returns ExpressionTag:
	
	{ExpressionTag} ((VALUEEQ QUOTE (value = TopLevel)? QUOTE)?  & (CONDITIONEQ QUOTE (condition=TopLevel)? QUOTE)? & (XMLSPACE EQUALS QUOTE PRESERVE QUOTE)?)

	(
		XML_TAG_SINGLEEND
	|
		( GT 	
			(AnyContent)*
		    closedTag ?= EXPRESSION_END_TAG
		)
	)	
	;	
	
Option: 
	 LTOPTIONTAG {Option} (attributes+=NonExpression)*
	(
		XML_TAG_SINGLEEND
	|
		( GT 	
		 LTSOPTIONTAG GT
		)
	);
	

	