/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.tsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

@Singleton
public class TslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmlAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cXMLHEADTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLTTSLTAGTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cLTNAVASCRIPTTAGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cNOTESEQTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cREPOSITORYEQTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cIDEQTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_2_2 = (RuleCall)cGroup_3_2.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_2_3 = (RuleCall)cGroup_3_2.eContents().get(3);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cAUTHOREQTerminalRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_3_1 = (RuleCall)cGroup_3_3.eContents().get(1);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_3_2 = (RuleCall)cGroup_3_3.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_3_3 = (RuleCall)cGroup_3_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cXMLNSTerminalRuleCall_3_4_0 = (RuleCall)cGroup_3_4.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_3_4_1 = (RuleCall)cGroup_3_4.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_3_4_2 = (RuleCall)cGroup_3_4.eContents().get(2);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_4_3 = (RuleCall)cGroup_3_4.eContents().get(3);
		private final RuleCall cQUOTETerminalRuleCall_3_4_4 = (RuleCall)cGroup_3_4.eContents().get(4);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final RuleCall cXMLNSTerminalRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3_5_1 = (RuleCall)cGroup_3_5.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_3_5_2 = (RuleCall)cGroup_3_5.eContents().get(2);
		private final RuleCall cEQUALSTerminalRuleCall_3_5_3 = (RuleCall)cGroup_3_5.eContents().get(3);
		private final RuleCall cQUOTETerminalRuleCall_3_5_4 = (RuleCall)cGroup_3_5.eContents().get(4);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_5_5 = (RuleCall)cGroup_3_5.eContents().get(5);
		private final RuleCall cQUOTETerminalRuleCall_3_5_6 = (RuleCall)cGroup_3_5.eContents().get(6);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_3_6_0 = (RuleCall)cGroup_3_6.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3_6_1 = (RuleCall)cGroup_3_6.eContents().get(1);
		private final RuleCall cSCHEMALOCATIONEQTerminalRuleCall_3_6_2 = (RuleCall)cGroup_3_6.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_6_3 = (RuleCall)cGroup_3_6.eContents().get(3);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_6_4 = (RuleCall)cGroup_3_6.eContents().get(4);
		private final RuleCall cQUOTETerminalRuleCall_3_6_5 = (RuleCall)cGroup_3_6.eContents().get(5);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final RuleCall cIDTerminalRuleCall_3_7_0 = (RuleCall)cGroup_3_7.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3_7_1 = (RuleCall)cGroup_3_7.eContents().get(1);
		private final RuleCall cNONAMESPACESCHEMALOCATIONEQTerminalRuleCall_3_7_2 = (RuleCall)cGroup_3_7.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_3_7_3 = (RuleCall)cGroup_3_7.eContents().get(3);
		private final RuleCall cAnyUntilQuoteParserRuleCall_3_7_4 = (RuleCall)cGroup_3_7.eContents().get(4);
		private final RuleCall cQUOTETerminalRuleCall_3_7_5 = (RuleCall)cGroup_3_7.eContents().get(5);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cChildrenAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_4_0_1_0_0 = (RuleCall)cChildrenAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_4_0_1_1_0 = (RuleCall)cChildrenAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_2 = (Assignment)cAlternatives_4_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_4_0_1_2_0 = (RuleCall)cChildrenAssignment_4_0_1_2.eContents().get(0);
		private final Assignment cMethodsAssignment_4_0_1_3 = (Assignment)cAlternatives_4_0_1.eContents().get(3);
		private final RuleCall cMethodsMethodsParserRuleCall_4_0_1_3_0 = (RuleCall)cMethodsAssignment_4_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_4 = (Assignment)cAlternatives_4_0_1.eContents().get(4);
		private final RuleCall cChildrenDebugTagParserRuleCall_4_0_1_4_0 = (RuleCall)cChildrenAssignment_4_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_5 = (Assignment)cAlternatives_4_0_1.eContents().get(5);
		private final RuleCall cChildrenIncludeParserRuleCall_4_0_1_5_0 = (RuleCall)cChildrenAssignment_4_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_6 = (Assignment)cAlternatives_4_0_1.eContents().get(6);
		private final RuleCall cChildrenValidationsParserRuleCall_4_0_1_6_0 = (RuleCall)cChildrenAssignment_4_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_7 = (Assignment)cAlternatives_4_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentClauseParserRuleCall_4_0_1_7_0 = (RuleCall)cChildrenAssignment_4_0_1_7.eContents().get(0);
		private final RuleCall cNAVASCRIPT_ENDTerminalRuleCall_4_0_2 = (RuleCall)cGroup_4_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		
		////xsi:noNamespaceSchemaLocation
		//Tml:
		//	{Tml} XMLHEAD? (LTTSLTAG | LTNAVASCRIPTTAG) ((NOTESEQ QUOTE AnyUntilQuote QUOTE)? & (REPOSITORYEQ QUOTE AnyUntilQuote
		//	QUOTE)? & (IDEQ QUOTE AnyUntilQuote QUOTE)? & (AUTHOREQ QUOTE AnyUntilQuote QUOTE)? & (XMLNS EQUALS QUOTE
		//	AnyUntilQuote QUOTE)? & (XMLNS COLON ID EQUALS QUOTE AnyUntilQuote QUOTE)? & (ID COLON SCHEMALOCATIONEQ QUOTE
		//	AnyUntilQuote QUOTE)? & (ID COLON NONAMESPACESCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?) (GT (children+=Message |
		//	children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
		//	children+=CommentClause)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//{Tml} XMLHEAD? (LTTSLTAG | LTNAVASCRIPTTAG) ((NOTESEQ QUOTE AnyUntilQuote QUOTE)? & (REPOSITORYEQ QUOTE AnyUntilQuote
		//QUOTE)? & (IDEQ QUOTE AnyUntilQuote QUOTE)? & (AUTHOREQ QUOTE AnyUntilQuote QUOTE)? & (XMLNS EQUALS QUOTE AnyUntilQuote
		//QUOTE)? & (XMLNS COLON ID EQUALS QUOTE AnyUntilQuote QUOTE)? & (ID COLON SCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)? &
		//(ID COLON NONAMESPACESCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?) (GT (children+=Message | children+=Map |
		//children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
		//children+=CommentClause)* NAVASCRIPT_END | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//{Tml}
		public Action getTmlAction_0() { return cTmlAction_0; }

		//XMLHEAD?
		public RuleCall getXMLHEADTerminalRuleCall_1() { return cXMLHEADTerminalRuleCall_1; }

		//LTTSLTAG | LTNAVASCRIPTTAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//LTTSLTAG
		public RuleCall getLTTSLTAGTerminalRuleCall_2_0() { return cLTTSLTAGTerminalRuleCall_2_0; }

		//LTNAVASCRIPTTAG
		public RuleCall getLTNAVASCRIPTTAGTerminalRuleCall_2_1() { return cLTNAVASCRIPTTAGTerminalRuleCall_2_1; }

		//(NOTESEQ QUOTE AnyUntilQuote QUOTE)? & (REPOSITORYEQ QUOTE AnyUntilQuote QUOTE)? & (IDEQ QUOTE AnyUntilQuote QUOTE)? &
		//(AUTHOREQ QUOTE AnyUntilQuote QUOTE)? & (XMLNS EQUALS QUOTE AnyUntilQuote QUOTE)? & (XMLNS COLON ID EQUALS QUOTE
		//AnyUntilQuote QUOTE)? & (ID COLON SCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)? & (ID COLON NONAMESPACESCHEMALOCATIONEQ
		//QUOTE AnyUntilQuote QUOTE)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//(NOTESEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//NOTESEQ
		public RuleCall getNOTESEQTerminalRuleCall_3_0_0() { return cNOTESEQTerminalRuleCall_3_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_0_1() { return cQUOTETerminalRuleCall_3_0_1; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_0_2() { return cAnyUntilQuoteParserRuleCall_3_0_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_0_3() { return cQUOTETerminalRuleCall_3_0_3; }

		//(REPOSITORYEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//REPOSITORYEQ
		public RuleCall getREPOSITORYEQTerminalRuleCall_3_1_0() { return cREPOSITORYEQTerminalRuleCall_3_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_1_1() { return cQUOTETerminalRuleCall_3_1_1; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_1_2() { return cAnyUntilQuoteParserRuleCall_3_1_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_1_3() { return cQUOTETerminalRuleCall_3_1_3; }

		//(IDEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//IDEQ
		public RuleCall getIDEQTerminalRuleCall_3_2_0() { return cIDEQTerminalRuleCall_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_2_1() { return cQUOTETerminalRuleCall_3_2_1; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_2_2() { return cAnyUntilQuoteParserRuleCall_3_2_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_2_3() { return cQUOTETerminalRuleCall_3_2_3; }

		//(AUTHOREQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//AUTHOREQ
		public RuleCall getAUTHOREQTerminalRuleCall_3_3_0() { return cAUTHOREQTerminalRuleCall_3_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_3_1() { return cQUOTETerminalRuleCall_3_3_1; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_3_2() { return cAnyUntilQuoteParserRuleCall_3_3_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_3_3() { return cQUOTETerminalRuleCall_3_3_3; }

		//(XMLNS EQUALS QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//XMLNS
		public RuleCall getXMLNSTerminalRuleCall_3_4_0() { return cXMLNSTerminalRuleCall_3_4_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3_4_1() { return cEQUALSTerminalRuleCall_3_4_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_4_2() { return cQUOTETerminalRuleCall_3_4_2; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_4_3() { return cAnyUntilQuoteParserRuleCall_3_4_3; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_4_4() { return cQUOTETerminalRuleCall_3_4_4; }

		//(XMLNS COLON ID EQUALS QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//XMLNS
		public RuleCall getXMLNSTerminalRuleCall_3_5_0() { return cXMLNSTerminalRuleCall_3_5_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_5_1() { return cCOLONTerminalRuleCall_3_5_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_5_2() { return cIDTerminalRuleCall_3_5_2; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3_5_3() { return cEQUALSTerminalRuleCall_3_5_3; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_5_4() { return cQUOTETerminalRuleCall_3_5_4; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_5_5() { return cAnyUntilQuoteParserRuleCall_3_5_5; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_5_6() { return cQUOTETerminalRuleCall_3_5_6; }

		//(ID COLON SCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_6() { return cGroup_3_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_6_0() { return cIDTerminalRuleCall_3_6_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_6_1() { return cCOLONTerminalRuleCall_3_6_1; }

		//SCHEMALOCATIONEQ
		public RuleCall getSCHEMALOCATIONEQTerminalRuleCall_3_6_2() { return cSCHEMALOCATIONEQTerminalRuleCall_3_6_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_6_3() { return cQUOTETerminalRuleCall_3_6_3; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_6_4() { return cAnyUntilQuoteParserRuleCall_3_6_4; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_6_5() { return cQUOTETerminalRuleCall_3_6_5; }

		//(ID COLON NONAMESPACESCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_3_7() { return cGroup_3_7; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_7_0() { return cIDTerminalRuleCall_3_7_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3_7_1() { return cCOLONTerminalRuleCall_3_7_1; }

		//NONAMESPACESCHEMALOCATIONEQ
		public RuleCall getNONAMESPACESCHEMALOCATIONEQTerminalRuleCall_3_7_2() { return cNONAMESPACESCHEMALOCATIONEQTerminalRuleCall_3_7_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_7_3() { return cQUOTETerminalRuleCall_3_7_3; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_3_7_4() { return cAnyUntilQuoteParserRuleCall_3_7_4; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_7_5() { return cQUOTETerminalRuleCall_3_7_5; }

		//GT (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include |
		//children+=Validations | children+=CommentClause)* NAVASCRIPT_END | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//GT (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include |
		//children+=Validations | children+=CommentClause)* NAVASCRIPT_END
		public Group getGroup_4_0() { return cGroup_4_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_4_0_0() { return cGTTerminalRuleCall_4_0_0; }

		//(children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include |
		//children+=Validations | children+=CommentClause)*
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_4_0_1_0() { return cChildrenAssignment_4_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_4_0_1_0_0() { return cChildrenMessageParserRuleCall_4_0_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_4_0_1_1() { return cChildrenAssignment_4_0_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_4_0_1_1_0() { return cChildrenMapParserRuleCall_4_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_4_0_1_2() { return cChildrenAssignment_4_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_4_0_1_2_0() { return cChildrenParamParserRuleCall_4_0_1_2_0; }

		//methods+=Methods
		public Assignment getMethodsAssignment_4_0_1_3() { return cMethodsAssignment_4_0_1_3; }

		//Methods
		public RuleCall getMethodsMethodsParserRuleCall_4_0_1_3_0() { return cMethodsMethodsParserRuleCall_4_0_1_3_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_4_0_1_4() { return cChildrenAssignment_4_0_1_4; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_4_0_1_4_0() { return cChildrenDebugTagParserRuleCall_4_0_1_4_0; }

		//children+=Include
		public Assignment getChildrenAssignment_4_0_1_5() { return cChildrenAssignment_4_0_1_5; }

		//Include
		public RuleCall getChildrenIncludeParserRuleCall_4_0_1_5_0() { return cChildrenIncludeParserRuleCall_4_0_1_5_0; }

		//children+=Validations
		public Assignment getChildrenAssignment_4_0_1_6() { return cChildrenAssignment_4_0_1_6; }

		//Validations
		public RuleCall getChildrenValidationsParserRuleCall_4_0_1_6_0() { return cChildrenValidationsParserRuleCall_4_0_1_6_0; }

		//children+=CommentClause
		public Assignment getChildrenAssignment_4_0_1_7() { return cChildrenAssignment_4_0_1_7; }

		//CommentClause
		public RuleCall getChildrenCommentClauseParserRuleCall_4_0_1_7_0() { return cChildrenCommentClauseParserRuleCall_4_0_1_7_0; }

		//NAVASCRIPT_END
		public RuleCall getNAVASCRIPT_ENDTerminalRuleCall_4_0_2() { return cNAVASCRIPT_ENDTerminalRuleCall_4_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_4_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_4_1; }
	}

	public class AnyContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnyExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnyContent:
		//	AnyExpression | QUOTE | EQUALS;
		public ParserRule getRule() { return rule; }

		//AnyExpression | QUOTE | EQUALS
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnyExpression
		public RuleCall getAnyExpressionParserRuleCall_0() { return cAnyExpressionParserRuleCall_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1() { return cQUOTETerminalRuleCall_1; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }
	}

	public class AnyUntilQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyUntilQuote");
		private final RuleCall cAnyContentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnyUntilQuote:
		//	AnyContent*;
		public ParserRule getRule() { return rule; }

		//AnyContent*
		public RuleCall getAnyContentParserRuleCall() { return cAnyContentParserRuleCall; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////
		////Garbage returns ecore::EString:
		////	(ID|DOT|PARENT|DOLLAR|TML_SEPARATOR|NUMBER|COMMA|SQBRACKET_OPEN|SQBRACKET_CLOSE|AT|COLON|BRACKET_OPEN|BRACKET_CLOSE|TML_EXISTS|EQUALS|NEQUALS|PLUS|MINUS|MULTIPLY|SEMICOLON)*
		////	;
		//// might need to add a lot more kywords here 'message' | 'comment' 
		//AttributeName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionValueTopLevelParserRuleCall_3_0 = (RuleCall)cExpressionValueAssignment_3.eContents().get(0);
		private final Assignment cEndTokenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndTokenQUOTETerminalRuleCall_4_0 = (RuleCall)cEndTokenAssignment_4.eContents().get(0);
		
		//Expression returns PossibleExpression:
		//	key=ID EQUALS QUOTE expressionValue=TopLevel endToken=QUOTE;
		public ParserRule getRule() { return rule; }

		//key=ID EQUALS QUOTE expressionValue=TopLevel endToken=QUOTE
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1() { return cEQUALSTerminalRuleCall_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2() { return cQUOTETerminalRuleCall_2; }

		//expressionValue=TopLevel
		public Assignment getExpressionValueAssignment_3() { return cExpressionValueAssignment_3; }

		//TopLevel
		public RuleCall getExpressionValueTopLevelParserRuleCall_3_0() { return cExpressionValueTopLevelParserRuleCall_3_0; }

		//endToken=QUOTE
		public Assignment getEndTokenAssignment_4() { return cEndTokenAssignment_4; }

		//QUOTE
		public RuleCall getEndTokenQUOTETerminalRuleCall_4_0() { return cEndTokenQUOTETerminalRuleCall_4_0; }
	}

	public class NonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_0_0_0 = (RuleCall)cNamespaceAssignment_0_0.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyAttributeNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cQUOTETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final RuleCall cAnyExpressionParserRuleCall_3_1_0 = (RuleCall)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cEXPRESSION_END_TAGTerminalRuleCall_3_1_1 = (RuleCall)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//NonExpression returns PossibleExpression:
		//	(namespace=ID COLON)? key=AttributeName EQUALS (QUOTE (AnyExpression | EXPRESSION_END_TAG)* QUOTE);
		public ParserRule getRule() { return rule; }

		//(namespace=ID COLON)? key=AttributeName EQUALS (QUOTE (AnyExpression | EXPRESSION_END_TAG)* QUOTE)
		public Group getGroup() { return cGroup; }

		//(namespace=ID COLON)?
		public Group getGroup_0() { return cGroup_0; }

		//namespace=ID
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_0_0_0() { return cNamespaceIDTerminalRuleCall_0_0_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_1() { return cCOLONTerminalRuleCall_0_1; }

		//key=AttributeName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//AttributeName
		public RuleCall getKeyAttributeNameParserRuleCall_1_0() { return cKeyAttributeNameParserRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//QUOTE (AnyExpression | EXPRESSION_END_TAG)* QUOTE
		public Group getGroup_3() { return cGroup_3; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_0() { return cQUOTETerminalRuleCall_3_0; }

		//(AnyExpression | EXPRESSION_END_TAG)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//AnyExpression
		public RuleCall getAnyExpressionParserRuleCall_3_1_0() { return cAnyExpressionParserRuleCall_3_1_0; }

		//EXPRESSION_END_TAG
		public RuleCall getEXPRESSION_END_TAGTerminalRuleCall_3_1_1() { return cEXPRESSION_END_TAGTerminalRuleCall_3_1_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_2() { return cQUOTETerminalRuleCall_3_2; }
	}

	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTMETHODSTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cMethodAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_2_0_1_0 = (RuleCall)cMethodAssignment_2_0_1.eContents().get(0);
		private final RuleCall cLTSMETHODSTAGTerminalRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Methods:
		//	LTMETHODSTAG {Methods} (GT method+=Method* LTSMETHODSTAG GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTMETHODSTAG {Methods} (GT method+=Method* LTSMETHODSTAG GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTMETHODSTAG
		public RuleCall getLTMETHODSTAGTerminalRuleCall_0() { return cLTMETHODSTAGTerminalRuleCall_0; }

		//{Methods}
		public Action getMethodsAction_1() { return cMethodsAction_1; }

		//GT method+=Method* LTSMETHODSTAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//GT method+=Method* LTSMETHODSTAG GT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_0_0() { return cGTTerminalRuleCall_2_0_0; }

		//method+=Method*
		public Assignment getMethodAssignment_2_0_1() { return cMethodAssignment_2_0_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_2_0_1_0() { return cMethodMethodParserRuleCall_2_0_1_0; }

		//LTSMETHODSTAG
		public RuleCall getLTSMETHODSTAGTerminalRuleCall_2_0_2() { return cLTSMETHODSTAGTerminalRuleCall_2_0_2; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_0_3() { return cGTTerminalRuleCall_2_0_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTMETHODTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNAMEEQTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAttributeAssignment_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cChildrenRequiredParserRuleCall_3_0_1_0 = (RuleCall)cChildrenAssignment_3_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cClosedTagLTSMETHODTAGTerminalRuleCall_3_0_2_0 = (RuleCall)cClosedTagAssignment_3_0_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Method:
		//	LTMETHODTAG {Method} (NAMEEQ QUOTE nameAttribute=ID QUOTE)? (GT children+=Required* closedTag?=LTSMETHODTAG GT |
		//	XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTMETHODTAG {Method} (NAMEEQ QUOTE nameAttribute=ID QUOTE)? (GT children+=Required* closedTag?=LTSMETHODTAG GT |
		//XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTMETHODTAG
		public RuleCall getLTMETHODTAGTerminalRuleCall_0() { return cLTMETHODTAGTerminalRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2() { return cGroup_2; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_2_0() { return cNAMEEQTerminalRuleCall_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1() { return cQUOTETerminalRuleCall_2_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_2() { return cNameAttributeAssignment_2_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_2_0() { return cNameAttributeIDTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3() { return cQUOTETerminalRuleCall_2_3; }

		//GT children+=Required* closedTag?=LTSMETHODTAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//GT children+=Required* closedTag?=LTSMETHODTAG GT
		public Group getGroup_3_0() { return cGroup_3_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_0() { return cGTTerminalRuleCall_3_0_0; }

		//children+=Required*
		public Assignment getChildrenAssignment_3_0_1() { return cChildrenAssignment_3_0_1; }

		//Required
		public RuleCall getChildrenRequiredParserRuleCall_3_0_1_0() { return cChildrenRequiredParserRuleCall_3_0_1_0; }

		//closedTag?=LTSMETHODTAG
		public Assignment getClosedTagAssignment_3_0_2() { return cClosedTagAssignment_3_0_2; }

		//LTSMETHODTAG
		public RuleCall getClosedTagLTSMETHODTAGTerminalRuleCall_3_0_2_0() { return cClosedTagLTSMETHODTAGTerminalRuleCall_3_0_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_3() { return cGTTerminalRuleCall_3_0_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class ValidationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTVALIDATIONSTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cValidationsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cChildrenAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cChildrenCheckParserRuleCall_2_0_1_0 = (RuleCall)cChildrenAssignment_2_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cClosedTagLTSVALIDATIONSTAGTerminalRuleCall_2_0_2_0 = (RuleCall)cClosedTagAssignment_2_0_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Validations:
		//	LTVALIDATIONSTAG {Validations} (GT children+=Check* closedTag?=LTSVALIDATIONSTAG GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTVALIDATIONSTAG {Validations} (GT children+=Check* closedTag?=LTSVALIDATIONSTAG GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTVALIDATIONSTAG
		public RuleCall getLTVALIDATIONSTAGTerminalRuleCall_0() { return cLTVALIDATIONSTAGTerminalRuleCall_0; }

		//{Validations}
		public Action getValidationsAction_1() { return cValidationsAction_1; }

		//GT children+=Check* closedTag?=LTSVALIDATIONSTAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//GT children+=Check* closedTag?=LTSVALIDATIONSTAG GT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_0_0() { return cGTTerminalRuleCall_2_0_0; }

		//children+=Check*
		public Assignment getChildrenAssignment_2_0_1() { return cChildrenAssignment_2_0_1; }

		//Check
		public RuleCall getChildrenCheckParserRuleCall_2_0_1_0() { return cChildrenCheckParserRuleCall_2_0_1_0; }

		//closedTag?=LTSVALIDATIONSTAG
		public Assignment getClosedTagAssignment_2_0_2() { return cClosedTagAssignment_2_0_2; }

		//LTSVALIDATIONSTAG
		public RuleCall getClosedTagLTSVALIDATIONSTAGTerminalRuleCall_2_0_2_0() { return cClosedTagLTSVALIDATIONSTAGTerminalRuleCall_2_0_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_0_3() { return cGTTerminalRuleCall_2_0_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTCHECKTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCheckAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesNonExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_0_1_0 = (RuleCall)cExpressionAssignment_3_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cClosedTagLTSCHECKTAGTerminalRuleCall_3_0_2_0 = (RuleCall)cClosedTagAssignment_3_0_2.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Check:
		//	LTCHECKTAG {Check} attributes+=NonExpression* (GT expression=TopLevel closedTag?=LTSCHECKTAG GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTCHECKTAG {Check} attributes+=NonExpression* (GT expression=TopLevel closedTag?=LTSCHECKTAG GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTCHECKTAG
		public RuleCall getLTCHECKTAGTerminalRuleCall_0() { return cLTCHECKTAGTerminalRuleCall_0; }

		//{Check}
		public Action getCheckAction_1() { return cCheckAction_1; }

		//attributes+=NonExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//NonExpression
		public RuleCall getAttributesNonExpressionParserRuleCall_2_0() { return cAttributesNonExpressionParserRuleCall_2_0; }

		//GT expression=TopLevel closedTag?=LTSCHECKTAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//GT expression=TopLevel closedTag?=LTSCHECKTAG GT
		public Group getGroup_3_0() { return cGroup_3_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_0() { return cGTTerminalRuleCall_3_0_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_3_0_1() { return cExpressionAssignment_3_0_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_0_1_0() { return cExpressionTopLevelParserRuleCall_3_0_1_0; }

		//closedTag?=LTSCHECKTAG
		public Assignment getClosedTagAssignment_3_0_2() { return cClosedTagAssignment_3_0_2; }

		//LTSCHECKTAG
		public RuleCall getClosedTagLTSCHECKTAGTerminalRuleCall_3_0_2_0() { return cClosedTagLTSCHECKTAGTerminalRuleCall_3_0_2_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_3() { return cGTTerminalRuleCall_3_0_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class CommentClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTCOMMENTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCommentAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cClosedTagLTSCOMMENTTerminalRuleCall_3_0_1_0 = (RuleCall)cClosedTagAssignment_3_0_1.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//CommentClause returns Comment:
		//	LTCOMMENT {Comment} attributes+=Expression* (GT closedTag?=LTSCOMMENT GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTCOMMENT {Comment} attributes+=Expression* (GT closedTag?=LTSCOMMENT GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTCOMMENT
		public RuleCall getLTCOMMENTTerminalRuleCall_0() { return cLTCOMMENTTerminalRuleCall_0; }

		//{Comment}
		public Action getCommentAction_1() { return cCommentAction_1; }

		//attributes+=Expression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Expression
		public RuleCall getAttributesExpressionParserRuleCall_2_0() { return cAttributesExpressionParserRuleCall_2_0; }

		//GT closedTag?=LTSCOMMENT GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//GT closedTag?=LTSCOMMENT GT
		public Group getGroup_3_0() { return cGroup_3_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_0() { return cGTTerminalRuleCall_3_0_0; }

		//closedTag?=LTSCOMMENT
		public Assignment getClosedTagAssignment_3_0_1() { return cClosedTagAssignment_3_0_1; }

		//LTSCOMMENT
		public RuleCall getClosedTagLTSCOMMENTTerminalRuleCall_3_0_1_0() { return cClosedTagLTSCOMMENTTerminalRuleCall_3_0_1_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_2() { return cGTTerminalRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTBREAKTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cBreakAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cLTSBREAKTAGTerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Break:
		//	LTBREAKTAG {Break} attributes+=Expression* (GT //		expression=TopLevel
		//	LTSBREAKTAG GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTBREAKTAG {Break} attributes+=Expression* (GT //		expression=TopLevel
		//LTSBREAKTAG GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTBREAKTAG
		public RuleCall getLTBREAKTAGTerminalRuleCall_0() { return cLTBREAKTAGTerminalRuleCall_0; }

		//{Break}
		public Action getBreakAction_1() { return cBreakAction_1; }

		//attributes+=Expression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Expression
		public RuleCall getAttributesExpressionParserRuleCall_2_0() { return cAttributesExpressionParserRuleCall_2_0; }

		//GT //		expression=TopLevel
		//LTSBREAKTAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//GT //		expression=TopLevel
		//LTSBREAKTAG GT
		public Group getGroup_3_0() { return cGroup_3_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_0() { return cGTTerminalRuleCall_3_0_0; }

		////		expression=TopLevel
		//LTSBREAKTAG
		public RuleCall getLTSBREAKTAGTerminalRuleCall_3_0_1() { return cLTSBREAKTAGTerminalRuleCall_3_0_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_2() { return cGTTerminalRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class FilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilePath");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTML_SEPARATORTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPARENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FilePath returns ecore::EString:
		//	(TML_SEPARATOR | PARENT | DOT | ID)+;
		public ParserRule getRule() { return rule; }

		//(TML_SEPARATOR | PARENT | DOT | ID)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//TML_SEPARATOR
		public RuleCall getTML_SEPARATORTerminalRuleCall_0() { return cTML_SEPARATORTerminalRuleCall_0; }

		//PARENT
		public RuleCall getPARENTTerminalRuleCall_1() { return cPARENTTerminalRuleCall_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2() { return cDOTTerminalRuleCall_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTINCLUDETAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cSCRIPTEQTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cAnyUntilQuoteParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cQUOTETerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLTSINCLUDETAGTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//// create Include entity in Model
		//Include returns Method:
		//	LTINCLUDETAG {Method} (SCRIPTEQ QUOTE AnyUntilQuote QUOTE)? (LTSINCLUDETAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTINCLUDETAG {Method} (SCRIPTEQ QUOTE AnyUntilQuote QUOTE)? (LTSINCLUDETAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTINCLUDETAG
		public RuleCall getLTINCLUDETAGTerminalRuleCall_0() { return cLTINCLUDETAGTerminalRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//(SCRIPTEQ QUOTE AnyUntilQuote QUOTE)?
		public Group getGroup_2() { return cGroup_2; }

		//SCRIPTEQ
		public RuleCall getSCRIPTEQTerminalRuleCall_2_0() { return cSCRIPTEQTerminalRuleCall_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1() { return cQUOTETerminalRuleCall_2_1; }

		//AnyUntilQuote
		public RuleCall getAnyUntilQuoteParserRuleCall_2_2() { return cAnyUntilQuoteParserRuleCall_2_2; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3() { return cQUOTETerminalRuleCall_2_3; }

		//LTSINCLUDETAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//LTSINCLUDETAG
		public RuleCall getLTSINCLUDETAGTerminalRuleCall_3_0() { return cLTSINCLUDETAGTerminalRuleCall_3_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTMESSAGETAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMessageAction_1 = (Action)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cCOUNTEQTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cCountAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cCountNUMBERTerminalRuleCall_2_0_2_0 = (RuleCall)cCountAssignment_2_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cMODEEQTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cModeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cModeIDTerminalRuleCall_2_1_2_0 = (RuleCall)cModeAssignment_2_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cNAMEEQTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_2_2_0 = (RuleCall)cNameAttributeAssignment_2_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_3 = (RuleCall)cGroup_2_2.eContents().get(3);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cTYPEEQTerminalRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cTypeAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_3_2_0 = (RuleCall)cTypeAssignment_2_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_3 = (RuleCall)cGroup_2_3.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cCONDITIONEQTerminalRuleCall_2_4_0 = (RuleCall)cGroup_2_4.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_1 = (RuleCall)cGroup_2_4.eContents().get(1);
		private final Assignment cConditionAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_2_4_2_0 = (RuleCall)cConditionAssignment_2_4_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_3 = (RuleCall)cGroup_2_4.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cChildrenAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_3_0_1_1_0 = (RuleCall)cChildrenAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_0_1_2_0 = (RuleCall)cChildrenAssignment_3_0_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_3 = (Assignment)cAlternatives_3_0_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_3_0_1_3_0 = (RuleCall)cChildrenAssignment_3_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_4 = (Assignment)cAlternatives_3_0_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_0_1_4_0 = (RuleCall)cChildrenAssignment_3_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_5 = (Assignment)cAlternatives_3_0_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_0_1_5_0 = (RuleCall)cChildrenAssignment_3_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_6 = (Assignment)cAlternatives_3_0_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_3_0_1_6_0 = (RuleCall)cChildrenAssignment_3_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_7 = (Assignment)cAlternatives_3_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentClauseParserRuleCall_3_0_1_7_0 = (RuleCall)cChildrenAssignment_3_0_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_8 = (Assignment)cAlternatives_3_0_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_3_0_1_8_0 = (RuleCall)cChildrenAssignment_3_0_1_8.eContents().get(0);
		private final RuleCall cLTSMESSAGETAGTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Message:
		//	LTMESSAGETAG {Message} ((COUNTEQ QUOTE count=NUMBER QUOTE)? & (MODEEQ QUOTE mode=ID QUOTE)? & (NAMEEQ QUOTE
		//	nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (GT
		//	(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//	children+=Field | children+=CommentClause | children+=Break)* LTSMESSAGETAG GT | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//LTMESSAGETAG {Message} ((COUNTEQ QUOTE count=NUMBER QUOTE)? & (MODEEQ QUOTE mode=ID QUOTE)? & (NAMEEQ QUOTE
		//nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (GT
		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=CommentClause | children+=Break)* LTSMESSAGETAG GT | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//LTMESSAGETAG
		public RuleCall getLTMESSAGETAGTerminalRuleCall_0() { return cLTMESSAGETAGTerminalRuleCall_0; }

		//{Message}
		public Action getMessageAction_1() { return cMessageAction_1; }

		//(COUNTEQ QUOTE count=NUMBER QUOTE)? & (MODEEQ QUOTE mode=ID QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ
		//QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//(COUNTEQ QUOTE count=NUMBER QUOTE)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//COUNTEQ
		public RuleCall getCOUNTEQTerminalRuleCall_2_0_0() { return cCOUNTEQTerminalRuleCall_2_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_1() { return cQUOTETerminalRuleCall_2_0_1; }

		//count=NUMBER
		public Assignment getCountAssignment_2_0_2() { return cCountAssignment_2_0_2; }

		//NUMBER
		public RuleCall getCountNUMBERTerminalRuleCall_2_0_2_0() { return cCountNUMBERTerminalRuleCall_2_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_3() { return cQUOTETerminalRuleCall_2_0_3; }

		//(MODEEQ QUOTE mode=ID QUOTE)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//MODEEQ
		public RuleCall getMODEEQTerminalRuleCall_2_1_0() { return cMODEEQTerminalRuleCall_2_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_1() { return cQUOTETerminalRuleCall_2_1_1; }

		//mode=ID
		public Assignment getModeAssignment_2_1_2() { return cModeAssignment_2_1_2; }

		//ID
		public RuleCall getModeIDTerminalRuleCall_2_1_2_0() { return cModeIDTerminalRuleCall_2_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_3() { return cQUOTETerminalRuleCall_2_1_3; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_2_2_0() { return cNAMEEQTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_1() { return cQUOTETerminalRuleCall_2_2_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_2_2() { return cNameAttributeAssignment_2_2_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_2_2_0() { return cNameAttributeIDTerminalRuleCall_2_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_3() { return cQUOTETerminalRuleCall_2_2_3; }

		//(TYPEEQ QUOTE type=ID QUOTE)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//TYPEEQ
		public RuleCall getTYPEEQTerminalRuleCall_2_3_0() { return cTYPEEQTerminalRuleCall_2_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_1() { return cQUOTETerminalRuleCall_2_3_1; }

		//type=ID
		public Assignment getTypeAssignment_2_3_2() { return cTypeAssignment_2_3_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_3_2_0() { return cTypeIDTerminalRuleCall_2_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_3() { return cQUOTETerminalRuleCall_2_3_3; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_2_4_0() { return cCONDITIONEQTerminalRuleCall_2_4_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_1() { return cQUOTETerminalRuleCall_2_4_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_2_4_2() { return cConditionAssignment_2_4_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_2_4_2_0() { return cConditionTopLevelParserRuleCall_2_4_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_3() { return cQUOTETerminalRuleCall_2_4_3; }

		//GT (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag
		//| children+=Field | children+=CommentClause | children+=Break)* LTSMESSAGETAG GT | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//GT (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag
		//| children+=Field | children+=CommentClause | children+=Break)* LTSMESSAGETAG GT
		public Group getGroup_3_0() { return cGroup_3_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_0() { return cGTTerminalRuleCall_3_0_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=CommentClause | children+=Break)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_0_1_0() { return cChildrenAssignment_3_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_0_1_0_0() { return cChildrenMessageParserRuleCall_3_0_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_3_0_1_1() { return cChildrenAssignment_3_0_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_3_0_1_1_0() { return cChildrenPropertyParserRuleCall_3_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_0_1_2() { return cChildrenAssignment_3_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_0_1_2_0() { return cChildrenParamParserRuleCall_3_0_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_0_1_3() { return cChildrenAssignment_3_0_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_0_1_3_0() { return cChildrenMapParserRuleCall_3_0_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_0_1_4() { return cChildrenAssignment_3_0_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_0_1_4_0() { return cChildrenMapMethodParserRuleCall_3_0_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_0_1_5() { return cChildrenAssignment_3_0_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_0_1_5_0() { return cChildrenDebugTagParserRuleCall_3_0_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_3_0_1_6() { return cChildrenAssignment_3_0_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_3_0_1_6_0() { return cChildrenFieldParserRuleCall_3_0_1_6_0; }

		//children+=CommentClause
		public Assignment getChildrenAssignment_3_0_1_7() { return cChildrenAssignment_3_0_1_7; }

		//CommentClause
		public RuleCall getChildrenCommentClauseParserRuleCall_3_0_1_7_0() { return cChildrenCommentClauseParserRuleCall_3_0_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_0_1_8() { return cChildrenAssignment_3_0_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_0_1_8_0() { return cChildrenBreakParserRuleCall_3_0_1_8_0; }

		//LTSMESSAGETAG
		public RuleCall getLTSMESSAGETAGTerminalRuleCall_3_0_2() { return cLTSMESSAGETAGTerminalRuleCall_3_0_2; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_0_3() { return cGTTerminalRuleCall_3_0_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTMAPTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMapAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cMapNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_2_1_0 = (RuleCall)cMapNameAssignment_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cREFEQTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Assignment cRefAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cRefPathElementParserRuleCall_3_0_2_0 = (RuleCall)cRefAssignment_3_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cOBJECTEQTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cObjectAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cObjectPathElementParserRuleCall_3_1_2_0 = (RuleCall)cObjectAssignment_3_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cNAMEEQTerminalRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Assignment cNameAttributeAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_3_2_2_0 = (RuleCall)cNameAttributeAssignment_3_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_2_3 = (RuleCall)cGroup_3_2.eContents().get(3);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cFILTEREQTerminalRuleCall_3_3_0 = (RuleCall)cGroup_3_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_3_1 = (RuleCall)cGroup_3_3.eContents().get(1);
		private final Assignment cFilterAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cFilterTopLevelParserRuleCall_3_3_2_0 = (RuleCall)cFilterAssignment_3_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_3_3 = (RuleCall)cGroup_3_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_3_4_0 = (RuleCall)cGroup_3_4.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_3_4_1 = (RuleCall)cGroup_3_4.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_3_4_2 = (RuleCall)cGroup_3_4.eContents().get(2);
		private final Assignment cExpressionsAssignment_3_4_3 = (Assignment)cGroup_3_4.eContents().get(3);
		private final RuleCall cExpressionsTopLevelParserRuleCall_3_4_3_0 = (RuleCall)cExpressionsAssignment_3_4_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_4_4 = (RuleCall)cGroup_3_4.eContents().get(4);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final RuleCall cCONDITIONEQTerminalRuleCall_3_5_0 = (RuleCall)cGroup_3_5.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_5_1 = (RuleCall)cGroup_3_5.eContents().get(1);
		private final Assignment cConditionAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_3_5_2_0 = (RuleCall)cConditionAssignment_3_5_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_3_5_3 = (RuleCall)cGroup_3_5.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Assignment cChildrenAssignment_4_1_1_0 = (Assignment)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_4_1_1_0_0 = (RuleCall)cChildrenAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_1 = (Assignment)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_4_1_1_1_0 = (RuleCall)cChildrenAssignment_4_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_2 = (Assignment)cAlternatives_4_1_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_4_1_1_2_0 = (RuleCall)cChildrenAssignment_4_1_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_3 = (Assignment)cAlternatives_4_1_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_4_1_1_3_0 = (RuleCall)cChildrenAssignment_4_1_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_4 = (Assignment)cAlternatives_4_1_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_4_1_1_4_0 = (RuleCall)cChildrenAssignment_4_1_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_5 = (Assignment)cAlternatives_4_1_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_4_1_1_5_0 = (RuleCall)cChildrenAssignment_4_1_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_6 = (Assignment)cAlternatives_4_1_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_4_1_1_6_0 = (RuleCall)cChildrenAssignment_4_1_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_7 = (Assignment)cAlternatives_4_1_1.eContents().get(7);
		private final RuleCall cChildrenCommentClauseParserRuleCall_4_1_1_7_0 = (RuleCall)cChildrenAssignment_4_1_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_1_8 = (Assignment)cAlternatives_4_1_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_4_1_1_8_0 = (RuleCall)cChildrenAssignment_4_1_1_8.eContents().get(0);
		private final Assignment cContentAssignment_4_1_1_9 = (Assignment)cAlternatives_4_1_1.eContents().get(9);
		private final RuleCall cContentAnyContentParserRuleCall_4_1_1_9_0 = (RuleCall)cContentAssignment_4_1_1_9.eContents().get(0);
		private final RuleCall cLTSMAPTAGTerminalRuleCall_4_1_2 = (RuleCall)cGroup_4_1.eContents().get(2);
		private final Group cGroup_4_1_3 = (Group)cGroup_4_1.eContents().get(3);
		private final RuleCall cDOTTerminalRuleCall_4_1_3_0 = (RuleCall)cGroup_4_1_3.eContents().get(0);
		private final Assignment cMapClosingNameAssignment_4_1_3_1 = (Assignment)cGroup_4_1_3.eContents().get(1);
		private final RuleCall cMapClosingNameMapIdParserRuleCall_4_1_3_1_0 = (RuleCall)cMapClosingNameAssignment_4_1_3_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_4_1_4 = (Assignment)cGroup_4_1.eContents().get(4);
		private final RuleCall cClosedTagGTTerminalRuleCall_4_1_4_0 = (RuleCall)cClosedTagAssignment_4_1_4.eContents().get(0);
		
		//Map:
		//	LTMAPTAG {Map} (DOT mapName=ID)? ((REFEQ QUOTE ref+=PathElement+ QUOTE)? & (OBJECTEQ QUOTE object+=PathElement+
		//	QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)? & (ID EQUALS QUOTE
		//	expressions+=TopLevel QUOTE)* & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT
		//	(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//	children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* LTSMAPTAG (DOT
		//	mapClosingName=MapId)? closedTag?=GT);
		public ParserRule getRule() { return rule; }

		//LTMAPTAG {Map} (DOT mapName=ID)? ((REFEQ QUOTE ref+=PathElement+ QUOTE)? & (OBJECTEQ QUOTE object+=PathElement+ QUOTE)?
		//& (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)? & (ID EQUALS QUOTE
		//expressions+=TopLevel QUOTE)* & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT
		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* LTSMAPTAG (DOT
		//mapClosingName=MapId)? closedTag?=GT)
		public Group getGroup() { return cGroup; }

		//LTMAPTAG
		public RuleCall getLTMAPTAGTerminalRuleCall_0() { return cLTMAPTAGTerminalRuleCall_0; }

		//{Map}
		public Action getMapAction_1() { return cMapAction_1; }

		//(DOT mapName=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0() { return cDOTTerminalRuleCall_2_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_2_1() { return cMapNameAssignment_2_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_2_1_0() { return cMapNameIDTerminalRuleCall_2_1_0; }

		//(REFEQ QUOTE ref+=PathElement+ QUOTE)? & (OBJECTEQ QUOTE object+=PathElement+ QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID
		//QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)? & (ID EQUALS QUOTE expressions+=TopLevel QUOTE)* & (CONDITIONEQ QUOTE
		//condition=TopLevel QUOTE)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//(REFEQ QUOTE ref+=PathElement+ QUOTE)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//REFEQ
		public RuleCall getREFEQTerminalRuleCall_3_0_0() { return cREFEQTerminalRuleCall_3_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_0_1() { return cQUOTETerminalRuleCall_3_0_1; }

		//ref+=PathElement+
		public Assignment getRefAssignment_3_0_2() { return cRefAssignment_3_0_2; }

		//PathElement
		public RuleCall getRefPathElementParserRuleCall_3_0_2_0() { return cRefPathElementParserRuleCall_3_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_0_3() { return cQUOTETerminalRuleCall_3_0_3; }

		//(OBJECTEQ QUOTE object+=PathElement+ QUOTE)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//OBJECTEQ
		public RuleCall getOBJECTEQTerminalRuleCall_3_1_0() { return cOBJECTEQTerminalRuleCall_3_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_1_1() { return cQUOTETerminalRuleCall_3_1_1; }

		//object+=PathElement+
		public Assignment getObjectAssignment_3_1_2() { return cObjectAssignment_3_1_2; }

		//PathElement
		public RuleCall getObjectPathElementParserRuleCall_3_1_2_0() { return cObjectPathElementParserRuleCall_3_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_1_3() { return cQUOTETerminalRuleCall_3_1_3; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_3_2_0() { return cNAMEEQTerminalRuleCall_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_2_1() { return cQUOTETerminalRuleCall_3_2_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_3_2_2() { return cNameAttributeAssignment_3_2_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_3_2_2_0() { return cNameAttributeIDTerminalRuleCall_3_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_2_3() { return cQUOTETerminalRuleCall_3_2_3; }

		//(FILTEREQ QUOTE filter=TopLevel QUOTE)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//FILTEREQ
		public RuleCall getFILTEREQTerminalRuleCall_3_3_0() { return cFILTEREQTerminalRuleCall_3_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_3_1() { return cQUOTETerminalRuleCall_3_3_1; }

		//filter=TopLevel
		public Assignment getFilterAssignment_3_3_2() { return cFilterAssignment_3_3_2; }

		//TopLevel
		public RuleCall getFilterTopLevelParserRuleCall_3_3_2_0() { return cFilterTopLevelParserRuleCall_3_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_3_3() { return cQUOTETerminalRuleCall_3_3_3; }

		//(ID EQUALS QUOTE expressions+=TopLevel QUOTE)*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_4_0() { return cIDTerminalRuleCall_3_4_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3_4_1() { return cEQUALSTerminalRuleCall_3_4_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_4_2() { return cQUOTETerminalRuleCall_3_4_2; }

		//expressions+=TopLevel
		public Assignment getExpressionsAssignment_3_4_3() { return cExpressionsAssignment_3_4_3; }

		//TopLevel
		public RuleCall getExpressionsTopLevelParserRuleCall_3_4_3_0() { return cExpressionsTopLevelParserRuleCall_3_4_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_4_4() { return cQUOTETerminalRuleCall_3_4_4; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_3_5_0() { return cCONDITIONEQTerminalRuleCall_3_5_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_5_1() { return cQUOTETerminalRuleCall_3_5_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_3_5_2() { return cConditionAssignment_3_5_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_3_5_2_0() { return cConditionTopLevelParserRuleCall_3_5_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_3_5_3() { return cQUOTETerminalRuleCall_3_5_3; }

		//XML_TAG_SINGLEEND | GT (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* LTSMAPTAG (DOT
		//mapClosingName=MapId)? closedTag?=GT
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_4_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_4_0; }

		//GT (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag
		//| children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* LTSMAPTAG (DOT
		//mapClosingName=MapId)? closedTag?=GT
		public Group getGroup_4_1() { return cGroup_4_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_4_1_0() { return cGTTerminalRuleCall_4_1_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)*
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//children+=Message
		public Assignment getChildrenAssignment_4_1_1_0() { return cChildrenAssignment_4_1_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_4_1_1_0_0() { return cChildrenMessageParserRuleCall_4_1_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_4_1_1_1() { return cChildrenAssignment_4_1_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_4_1_1_1_0() { return cChildrenPropertyParserRuleCall_4_1_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_4_1_1_2() { return cChildrenAssignment_4_1_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_4_1_1_2_0() { return cChildrenParamParserRuleCall_4_1_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_4_1_1_3() { return cChildrenAssignment_4_1_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_4_1_1_3_0() { return cChildrenMapParserRuleCall_4_1_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_4_1_1_4() { return cChildrenAssignment_4_1_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_4_1_1_4_0() { return cChildrenMapMethodParserRuleCall_4_1_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_4_1_1_5() { return cChildrenAssignment_4_1_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_4_1_1_5_0() { return cChildrenDebugTagParserRuleCall_4_1_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_4_1_1_6() { return cChildrenAssignment_4_1_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_4_1_1_6_0() { return cChildrenFieldParserRuleCall_4_1_1_6_0; }

		//children+=CommentClause
		public Assignment getChildrenAssignment_4_1_1_7() { return cChildrenAssignment_4_1_1_7; }

		//CommentClause
		public RuleCall getChildrenCommentClauseParserRuleCall_4_1_1_7_0() { return cChildrenCommentClauseParserRuleCall_4_1_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_4_1_1_8() { return cChildrenAssignment_4_1_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_4_1_1_8_0() { return cChildrenBreakParserRuleCall_4_1_1_8_0; }

		//content+=AnyContent
		public Assignment getContentAssignment_4_1_1_9() { return cContentAssignment_4_1_1_9; }

		//AnyContent
		public RuleCall getContentAnyContentParserRuleCall_4_1_1_9_0() { return cContentAnyContentParserRuleCall_4_1_1_9_0; }

		//LTSMAPTAG
		public RuleCall getLTSMAPTAGTerminalRuleCall_4_1_2() { return cLTSMAPTAGTerminalRuleCall_4_1_2; }

		//(DOT mapClosingName=MapId)?
		public Group getGroup_4_1_3() { return cGroup_4_1_3; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_4_1_3_0() { return cDOTTerminalRuleCall_4_1_3_0; }

		//mapClosingName=MapId
		public Assignment getMapClosingNameAssignment_4_1_3_1() { return cMapClosingNameAssignment_4_1_3_1; }

		//MapId
		public RuleCall getMapClosingNameMapIdParserRuleCall_4_1_3_1_0() { return cMapClosingNameMapIdParserRuleCall_4_1_3_1_0; }

		//closedTag?=GT
		public Assignment getClosedTagAssignment_4_1_4() { return cClosedTagAssignment_4_1_4; }

		//GT
		public RuleCall getClosedTagGTTerminalRuleCall_4_1_4_0() { return cClosedTagGTTerminalRuleCall_4_1_4_0; }
	}

	public class MapIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapId");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MapId:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class RequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Required");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTREQUIREDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cRequiredAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMESSAGEEQTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAttributeAssignment_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cLTSREQUIREDTAGTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//Required:
		//	LTREQUIREDTAG {Required} (MESSAGEEQ QUOTE nameAttribute=ID QUOTE)? (XML_TAG_SINGLEEND | GT LTSREQUIREDTAG GT);
		public ParserRule getRule() { return rule; }

		//LTREQUIREDTAG {Required} (MESSAGEEQ QUOTE nameAttribute=ID QUOTE)? (XML_TAG_SINGLEEND | GT LTSREQUIREDTAG GT)
		public Group getGroup() { return cGroup; }

		//LTREQUIREDTAG
		public RuleCall getLTREQUIREDTAGTerminalRuleCall_0() { return cLTREQUIREDTAGTerminalRuleCall_0; }

		//{Required}
		public Action getRequiredAction_1() { return cRequiredAction_1; }

		//(MESSAGEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2() { return cGroup_2; }

		//MESSAGEEQ
		public RuleCall getMESSAGEEQTerminalRuleCall_2_0() { return cMESSAGEEQTerminalRuleCall_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1() { return cQUOTETerminalRuleCall_2_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_2() { return cNameAttributeAssignment_2_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_2_0() { return cNameAttributeIDTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3() { return cQUOTETerminalRuleCall_2_3; }

		//XML_TAG_SINGLEEND | GT LTSREQUIREDTAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//GT LTSREQUIREDTAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0() { return cGTTerminalRuleCall_3_1_0; }

		//LTSREQUIREDTAG
		public RuleCall getLTSREQUIREDTAGTerminalRuleCall_3_1_1() { return cLTSREQUIREDTAGTerminalRuleCall_3_1_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_2() { return cGTTerminalRuleCall_3_1_2; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTPROPERTYTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cPropertyAction_1 = (Action)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cDESCRIPTIONEQTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cDescriptionAnyUntilQuoteParserRuleCall_2_0_2_0 = (RuleCall)cDescriptionAssignment_2_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cLENGTHEQTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cLengthAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cLengthNUMBERTerminalRuleCall_2_1_2_0 = (RuleCall)cLengthAssignment_2_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cCARDINALITYEQTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cCardinalityAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final Alternatives cCardinalityAlternatives_2_2_2_0 = (Alternatives)cCardinalityAssignment_2_2_2.eContents().get(0);
		private final RuleCall cCardinalityIDTerminalRuleCall_2_2_2_0_0 = (RuleCall)cCardinalityAlternatives_2_2_2_0.eContents().get(0);
		private final RuleCall cCardinalityPLUSTerminalRuleCall_2_2_2_0_1 = (RuleCall)cCardinalityAlternatives_2_2_2_0.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_2_2_3 = (RuleCall)cGroup_2_2.eContents().get(3);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cDIRECTIONEQTerminalRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cDirectionAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cDirectionIDTerminalRuleCall_2_3_2_0 = (RuleCall)cDirectionAssignment_2_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_3 = (RuleCall)cGroup_2_3.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cSUBTYPESEQTerminalRuleCall_2_4_0 = (RuleCall)cGroup_2_4.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_1 = (RuleCall)cGroup_2_4.eContents().get(1);
		private final Assignment cSubtypesAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cSubtypesIDTerminalRuleCall_2_4_2_0 = (RuleCall)cSubtypesAssignment_2_4_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_3 = (RuleCall)cGroup_2_4.eContents().get(3);
		private final Group cGroup_2_5 = (Group)cUnorderedGroup_2.eContents().get(5);
		private final RuleCall cNAMEEQTerminalRuleCall_2_5_0 = (RuleCall)cGroup_2_5.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_5_1 = (RuleCall)cGroup_2_5.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_5_2 = (Assignment)cGroup_2_5.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_5_2_0 = (RuleCall)cNameAttributeAssignment_2_5_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_5_3 = (RuleCall)cGroup_2_5.eContents().get(3);
		private final Group cGroup_2_6 = (Group)cUnorderedGroup_2.eContents().get(6);
		private final RuleCall cTYPEEQTerminalRuleCall_2_6_0 = (RuleCall)cGroup_2_6.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_6_1 = (RuleCall)cGroup_2_6.eContents().get(1);
		private final Assignment cTypeAssignment_2_6_2 = (Assignment)cGroup_2_6.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_6_2_0 = (RuleCall)cTypeAssignment_2_6_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_6_3 = (RuleCall)cGroup_2_6.eContents().get(3);
		private final Group cGroup_2_7 = (Group)cUnorderedGroup_2.eContents().get(7);
		private final RuleCall cCONDITIONEQTerminalRuleCall_2_7_0 = (RuleCall)cGroup_2_7.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_7_1 = (RuleCall)cGroup_2_7.eContents().get(1);
		private final Assignment cConditionAssignment_2_7_2 = (Assignment)cGroup_2_7.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_2_7_2_0 = (RuleCall)cConditionAssignment_2_7_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_7_3 = (RuleCall)cGroup_2_7.eContents().get(3);
		private final Group cGroup_2_8 = (Group)cUnorderedGroup_2.eContents().get(8);
		private final RuleCall cVALUEEQTerminalRuleCall_2_8_0 = (RuleCall)cGroup_2_8.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_8_1 = (RuleCall)cGroup_2_8.eContents().get(1);
		private final Assignment cRawValueAssignment_2_8_2 = (Assignment)cGroup_2_8.eContents().get(2);
		private final RuleCall cRawValueAnyUntilQuoteParserRuleCall_2_8_2_0 = (RuleCall)cRawValueAssignment_2_8_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_8_3 = (RuleCall)cGroup_2_8.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_1_2_0 = (RuleCall)cChildrenAssignment_3_1_1_2.eContents().get(0);
		private final RuleCall cLTSPROPERTYTAGTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		
		//Property:
		//	LTPROPERTYTAG {Property} ((DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)? & (LENGTHEQ QUOTE length=NUMBER
		//	QUOTE)? & (CARDINALITYEQ QUOTE cardinality=(ID | PLUS) QUOTE)? & (DIRECTIONEQ QUOTE direction=ID QUOTE)? & (SUBTYPESEQ
		//	QUOTE subtypes=ID QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ
		//	QUOTE condition=TopLevel QUOTE)? & (VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?) (XML_TAG_SINGLEEND | GT
		//	(children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPROPERTYTAG GT);
		public ParserRule getRule() { return rule; }

		//LTPROPERTYTAG {Property} ((DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)? & (LENGTHEQ QUOTE length=NUMBER QUOTE)?
		//& (CARDINALITYEQ QUOTE cardinality=(ID | PLUS) QUOTE)? & (DIRECTIONEQ QUOTE direction=ID QUOTE)? & (SUBTYPESEQ QUOTE
		//subtypes=ID QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE
		//condition=TopLevel QUOTE)? & (VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?) (XML_TAG_SINGLEEND | GT
		//(children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPROPERTYTAG GT)
		public Group getGroup() { return cGroup; }

		//LTPROPERTYTAG
		public RuleCall getLTPROPERTYTAGTerminalRuleCall_0() { return cLTPROPERTYTAGTerminalRuleCall_0; }

		//{Property}
		public Action getPropertyAction_1() { return cPropertyAction_1; }

		//(DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)? & (LENGTHEQ QUOTE length=NUMBER QUOTE)? & (CARDINALITYEQ QUOTE
		//cardinality=(ID | PLUS) QUOTE)? & (DIRECTIONEQ QUOTE direction=ID QUOTE)? & (SUBTYPESEQ QUOTE subtypes=ID QUOTE)? &
		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		//& (VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//(DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//DESCRIPTIONEQ
		public RuleCall getDESCRIPTIONEQTerminalRuleCall_2_0_0() { return cDESCRIPTIONEQTerminalRuleCall_2_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_1() { return cQUOTETerminalRuleCall_2_0_1; }

		//description=AnyUntilQuote
		public Assignment getDescriptionAssignment_2_0_2() { return cDescriptionAssignment_2_0_2; }

		//AnyUntilQuote
		public RuleCall getDescriptionAnyUntilQuoteParserRuleCall_2_0_2_0() { return cDescriptionAnyUntilQuoteParserRuleCall_2_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_3() { return cQUOTETerminalRuleCall_2_0_3; }

		//(LENGTHEQ QUOTE length=NUMBER QUOTE)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//LENGTHEQ
		public RuleCall getLENGTHEQTerminalRuleCall_2_1_0() { return cLENGTHEQTerminalRuleCall_2_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_1() { return cQUOTETerminalRuleCall_2_1_1; }

		//length=NUMBER
		public Assignment getLengthAssignment_2_1_2() { return cLengthAssignment_2_1_2; }

		//NUMBER
		public RuleCall getLengthNUMBERTerminalRuleCall_2_1_2_0() { return cLengthNUMBERTerminalRuleCall_2_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_3() { return cQUOTETerminalRuleCall_2_1_3; }

		//(CARDINALITYEQ QUOTE cardinality=(ID | PLUS) QUOTE)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//CARDINALITYEQ
		public RuleCall getCARDINALITYEQTerminalRuleCall_2_2_0() { return cCARDINALITYEQTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_1() { return cQUOTETerminalRuleCall_2_2_1; }

		//cardinality=(ID | PLUS)
		public Assignment getCardinalityAssignment_2_2_2() { return cCardinalityAssignment_2_2_2; }

		//ID | PLUS
		public Alternatives getCardinalityAlternatives_2_2_2_0() { return cCardinalityAlternatives_2_2_2_0; }

		//ID
		public RuleCall getCardinalityIDTerminalRuleCall_2_2_2_0_0() { return cCardinalityIDTerminalRuleCall_2_2_2_0_0; }

		//PLUS
		public RuleCall getCardinalityPLUSTerminalRuleCall_2_2_2_0_1() { return cCardinalityPLUSTerminalRuleCall_2_2_2_0_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_3() { return cQUOTETerminalRuleCall_2_2_3; }

		//(DIRECTIONEQ QUOTE direction=ID QUOTE)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//DIRECTIONEQ
		public RuleCall getDIRECTIONEQTerminalRuleCall_2_3_0() { return cDIRECTIONEQTerminalRuleCall_2_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_1() { return cQUOTETerminalRuleCall_2_3_1; }

		//direction=ID
		public Assignment getDirectionAssignment_2_3_2() { return cDirectionAssignment_2_3_2; }

		//ID
		public RuleCall getDirectionIDTerminalRuleCall_2_3_2_0() { return cDirectionIDTerminalRuleCall_2_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_3() { return cQUOTETerminalRuleCall_2_3_3; }

		//(SUBTYPESEQ QUOTE subtypes=ID QUOTE)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//SUBTYPESEQ
		public RuleCall getSUBTYPESEQTerminalRuleCall_2_4_0() { return cSUBTYPESEQTerminalRuleCall_2_4_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_1() { return cQUOTETerminalRuleCall_2_4_1; }

		//subtypes=ID
		public Assignment getSubtypesAssignment_2_4_2() { return cSubtypesAssignment_2_4_2; }

		//ID
		public RuleCall getSubtypesIDTerminalRuleCall_2_4_2_0() { return cSubtypesIDTerminalRuleCall_2_4_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_3() { return cQUOTETerminalRuleCall_2_4_3; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_2_5_0() { return cNAMEEQTerminalRuleCall_2_5_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_5_1() { return cQUOTETerminalRuleCall_2_5_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_5_2() { return cNameAttributeAssignment_2_5_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_5_2_0() { return cNameAttributeIDTerminalRuleCall_2_5_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_5_3() { return cQUOTETerminalRuleCall_2_5_3; }

		//(TYPEEQ QUOTE type=ID QUOTE)?
		public Group getGroup_2_6() { return cGroup_2_6; }

		//TYPEEQ
		public RuleCall getTYPEEQTerminalRuleCall_2_6_0() { return cTYPEEQTerminalRuleCall_2_6_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_6_1() { return cQUOTETerminalRuleCall_2_6_1; }

		//type=ID
		public Assignment getTypeAssignment_2_6_2() { return cTypeAssignment_2_6_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_6_2_0() { return cTypeIDTerminalRuleCall_2_6_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_6_3() { return cQUOTETerminalRuleCall_2_6_3; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2_7() { return cGroup_2_7; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_2_7_0() { return cCONDITIONEQTerminalRuleCall_2_7_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_7_1() { return cQUOTETerminalRuleCall_2_7_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_2_7_2() { return cConditionAssignment_2_7_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_2_7_2_0() { return cConditionTopLevelParserRuleCall_2_7_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_7_3() { return cQUOTETerminalRuleCall_2_7_3; }

		//(VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?
		public Group getGroup_2_8() { return cGroup_2_8; }

		//VALUEEQ
		public RuleCall getVALUEEQTerminalRuleCall_2_8_0() { return cVALUEEQTerminalRuleCall_2_8_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_8_1() { return cQUOTETerminalRuleCall_2_8_1; }

		//rawValue=AnyUntilQuote
		public Assignment getRawValueAssignment_2_8_2() { return cRawValueAssignment_2_8_2; }

		//AnyUntilQuote
		public RuleCall getRawValueAnyUntilQuoteParserRuleCall_2_8_2_0() { return cRawValueAnyUntilQuoteParserRuleCall_2_8_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_8_3() { return cQUOTETerminalRuleCall_2_8_3; }

		//XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPROPERTYTAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//GT (children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPROPERTYTAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0() { return cGTTerminalRuleCall_3_1_0; }

		//(children+=ExpressionOrOption | children+=Map | children+=MapMethod)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_1_0() { return cChildrenMapParserRuleCall_3_1_1_1_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_1_2() { return cChildrenAssignment_3_1_1_2; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_1_2_0() { return cChildrenMapMethodParserRuleCall_3_1_1_2_0; }

		//LTSPROPERTYTAG
		public RuleCall getLTSPROPERTYTAGTerminalRuleCall_3_1_2() { return cLTSPROPERTYTAGTerminalRuleCall_3_1_2; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_3() { return cGTTerminalRuleCall_3_1_3; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTPARAMTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cParamAction_1 = (Action)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cNAMEEQTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_0_2_0 = (RuleCall)cNameAttributeAssignment_2_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cTYPEEQTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_1_2_0 = (RuleCall)cTypeAssignment_2_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cCONDITIONEQTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cConditionAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_2_2_2_0 = (RuleCall)cConditionAssignment_2_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_3 = (RuleCall)cGroup_2_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_1_2_0 = (RuleCall)cChildrenAssignment_3_1_1_2.eContents().get(0);
		private final RuleCall cLTSPARAMTAGTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		
		//Param:
		//	LTPARAMTAG {Param} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE
		//	condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Map |
		//	children+=MapMethod)* LTSPARAMTAG GT);
		public ParserRule getRule() { return rule; }

		//LTPARAMTAG {Param} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE
		//condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Map |
		//children+=MapMethod)* LTSPARAMTAG GT)
		public Group getGroup() { return cGroup; }

		//LTPARAMTAG
		public RuleCall getLTPARAMTAGTerminalRuleCall_0() { return cLTPARAMTAGTerminalRuleCall_0; }

		//{Param}
		public Action getParamAction_1() { return cParamAction_1; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_2_0_0() { return cNAMEEQTerminalRuleCall_2_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_1() { return cQUOTETerminalRuleCall_2_0_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_0_2() { return cNameAttributeAssignment_2_0_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_0_2_0() { return cNameAttributeIDTerminalRuleCall_2_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_3() { return cQUOTETerminalRuleCall_2_0_3; }

		//(TYPEEQ QUOTE type=ID QUOTE)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//TYPEEQ
		public RuleCall getTYPEEQTerminalRuleCall_2_1_0() { return cTYPEEQTerminalRuleCall_2_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_1() { return cQUOTETerminalRuleCall_2_1_1; }

		//type=ID
		public Assignment getTypeAssignment_2_1_2() { return cTypeAssignment_2_1_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_1_2_0() { return cTypeIDTerminalRuleCall_2_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_3() { return cQUOTETerminalRuleCall_2_1_3; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_2_2_0() { return cCONDITIONEQTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_1() { return cQUOTETerminalRuleCall_2_2_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_2_2_2() { return cConditionAssignment_2_2_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_2_2_2_0() { return cConditionTopLevelParserRuleCall_2_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_3() { return cQUOTETerminalRuleCall_2_2_3; }

		//XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPARAMTAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//GT (children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPARAMTAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0() { return cGTTerminalRuleCall_3_1_0; }

		//(children+=ExpressionOrOption | children+=Map | children+=MapMethod)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_1_0() { return cChildrenMapParserRuleCall_3_1_1_1_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_1_2() { return cChildrenAssignment_3_1_1_2; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_1_2_0() { return cChildrenMapMethodParserRuleCall_3_1_1_2_0; }

		//LTSPARAMTAG
		public RuleCall getLTSPARAMTAGTerminalRuleCall_3_1_2() { return cLTSPARAMTAGTerminalRuleCall_3_1_2; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_3() { return cGTTerminalRuleCall_3_1_3; }
	}

	public class MapMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cMapNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_1_0 = (RuleCall)cMapNameAssignment_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMethodNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodNameIDTerminalRuleCall_3_0 = (RuleCall)cMethodNameAssignment_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesExpressionParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1 = (Alternatives)cGroup_5_1.eContents().get(1);
		private final Assignment cChildrenAssignment_5_1_1_0 = (Assignment)cAlternatives_5_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0 = (RuleCall)cChildrenAssignment_5_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_1 = (Assignment)cAlternatives_5_1_1.eContents().get(1);
		private final RuleCall cChildrenMessageParserRuleCall_5_1_1_1_0 = (RuleCall)cChildrenAssignment_5_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_2 = (Assignment)cAlternatives_5_1_1.eContents().get(2);
		private final RuleCall cChildrenPropertyParserRuleCall_5_1_1_2_0 = (RuleCall)cChildrenAssignment_5_1_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_3 = (Assignment)cAlternatives_5_1_1.eContents().get(3);
		private final RuleCall cChildrenParamParserRuleCall_5_1_1_3_0 = (RuleCall)cChildrenAssignment_5_1_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_4 = (Assignment)cAlternatives_5_1_1.eContents().get(4);
		private final RuleCall cChildrenMapParserRuleCall_5_1_1_4_0 = (RuleCall)cChildrenAssignment_5_1_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_5 = (Assignment)cAlternatives_5_1_1.eContents().get(5);
		private final RuleCall cChildrenMapMethodParserRuleCall_5_1_1_5_0 = (RuleCall)cChildrenAssignment_5_1_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_6 = (Assignment)cAlternatives_5_1_1.eContents().get(6);
		private final RuleCall cChildrenDebugTagParserRuleCall_5_1_1_6_0 = (RuleCall)cChildrenAssignment_5_1_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_7 = (Assignment)cAlternatives_5_1_1.eContents().get(7);
		private final RuleCall cChildrenFieldParserRuleCall_5_1_1_7_0 = (RuleCall)cChildrenAssignment_5_1_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_8 = (Assignment)cAlternatives_5_1_1.eContents().get(8);
		private final RuleCall cChildrenCommentClauseParserRuleCall_5_1_1_8_0 = (RuleCall)cChildrenAssignment_5_1_1_8.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_9 = (Assignment)cAlternatives_5_1_1.eContents().get(9);
		private final RuleCall cChildrenBreakParserRuleCall_5_1_1_9_0 = (RuleCall)cChildrenAssignment_5_1_1_9.eContents().get(0);
		private final Assignment cContentAssignment_5_1_1_10 = (Assignment)cAlternatives_5_1_1.eContents().get(10);
		private final RuleCall cContentAnyContentParserRuleCall_5_1_1_10_0 = (RuleCall)cContentAssignment_5_1_1_10.eContents().get(0);
		private final Assignment cClosedTagAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cClosedTagXML_START_ENDTAGTerminalRuleCall_5_1_2_0 = (RuleCall)cClosedTagAssignment_5_1_2.eContents().get(0);
		private final Assignment cMethodClosingNameAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cMethodClosingNameIDTerminalRuleCall_5_1_3_0 = (RuleCall)cMethodClosingNameAssignment_5_1_3.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_5_1_4 = (RuleCall)cGroup_5_1.eContents().get(4);
		private final Assignment cMethodClosingMethodAssignment_5_1_5 = (Assignment)cGroup_5_1.eContents().get(5);
		private final RuleCall cMethodClosingMethodIDTerminalRuleCall_5_1_5_0 = (RuleCall)cMethodClosingMethodAssignment_5_1_5.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_5_1_6 = (RuleCall)cGroup_5_1.eContents().get(6);
		
		//MapMethod:
		//	LT mapName=ID DOT methodName=ID attributes+=Expression* (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption |
		//	children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//	children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* closedTag?=XML_START_ENDTAG
		//	methodClosingName=ID DOT methodClosingMethod=ID GT);
		public ParserRule getRule() { return rule; }

		//LT mapName=ID DOT methodName=ID attributes+=Expression* (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption |
		//children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* closedTag?=XML_START_ENDTAG
		//methodClosingName=ID DOT methodClosingMethod=ID GT)
		public Group getGroup() { return cGroup; }

		//LT
		public RuleCall getLTTerminalRuleCall_0() { return cLTTerminalRuleCall_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_1() { return cMapNameAssignment_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_1_0() { return cMapNameIDTerminalRuleCall_1_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2() { return cDOTTerminalRuleCall_2; }

		//methodName=ID
		public Assignment getMethodNameAssignment_3() { return cMethodNameAssignment_3; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_3_0() { return cMethodNameIDTerminalRuleCall_3_0; }

		//attributes+=Expression*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Expression
		public RuleCall getAttributesExpressionParserRuleCall_4_0() { return cAttributesExpressionParserRuleCall_4_0; }

		//XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
		//children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=CommentClause | children+=Break
		//| content+=AnyContent)* closedTag?=XML_START_ENDTAG methodClosingName=ID DOT methodClosingMethod=ID GT
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_5_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_5_0; }

		//GT (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=CommentClause | children+=Break |
		//content+=AnyContent)* closedTag?=XML_START_ENDTAG methodClosingName=ID DOT methodClosingMethod=ID GT
		public Group getGroup_5_1() { return cGroup_5_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_5_1_0() { return cGTTerminalRuleCall_5_1_0; }

		//(children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=CommentClause | children+=Break |
		//content+=AnyContent)*
		public Alternatives getAlternatives_5_1_1() { return cAlternatives_5_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_5_1_1_0() { return cChildrenAssignment_5_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0; }

		//children+=Message
		public Assignment getChildrenAssignment_5_1_1_1() { return cChildrenAssignment_5_1_1_1; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_5_1_1_1_0() { return cChildrenMessageParserRuleCall_5_1_1_1_0; }

		//children+=Property
		public Assignment getChildrenAssignment_5_1_1_2() { return cChildrenAssignment_5_1_1_2; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_5_1_1_2_0() { return cChildrenPropertyParserRuleCall_5_1_1_2_0; }

		//children+=Param
		public Assignment getChildrenAssignment_5_1_1_3() { return cChildrenAssignment_5_1_1_3; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_5_1_1_3_0() { return cChildrenParamParserRuleCall_5_1_1_3_0; }

		//children+=Map
		public Assignment getChildrenAssignment_5_1_1_4() { return cChildrenAssignment_5_1_1_4; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_5_1_1_4_0() { return cChildrenMapParserRuleCall_5_1_1_4_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_5_1_1_5() { return cChildrenAssignment_5_1_1_5; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_5_1_1_5_0() { return cChildrenMapMethodParserRuleCall_5_1_1_5_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_5_1_1_6() { return cChildrenAssignment_5_1_1_6; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_5_1_1_6_0() { return cChildrenDebugTagParserRuleCall_5_1_1_6_0; }

		//children+=Field
		public Assignment getChildrenAssignment_5_1_1_7() { return cChildrenAssignment_5_1_1_7; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_5_1_1_7_0() { return cChildrenFieldParserRuleCall_5_1_1_7_0; }

		//children+=CommentClause
		public Assignment getChildrenAssignment_5_1_1_8() { return cChildrenAssignment_5_1_1_8; }

		//CommentClause
		public RuleCall getChildrenCommentClauseParserRuleCall_5_1_1_8_0() { return cChildrenCommentClauseParserRuleCall_5_1_1_8_0; }

		//children+=Break
		public Assignment getChildrenAssignment_5_1_1_9() { return cChildrenAssignment_5_1_1_9; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_5_1_1_9_0() { return cChildrenBreakParserRuleCall_5_1_1_9_0; }

		//content+=AnyContent
		public Assignment getContentAssignment_5_1_1_10() { return cContentAssignment_5_1_1_10; }

		//AnyContent
		public RuleCall getContentAnyContentParserRuleCall_5_1_1_10_0() { return cContentAnyContentParserRuleCall_5_1_1_10_0; }

		//closedTag?=XML_START_ENDTAG
		public Assignment getClosedTagAssignment_5_1_2() { return cClosedTagAssignment_5_1_2; }

		//XML_START_ENDTAG
		public RuleCall getClosedTagXML_START_ENDTAGTerminalRuleCall_5_1_2_0() { return cClosedTagXML_START_ENDTAGTerminalRuleCall_5_1_2_0; }

		//methodClosingName=ID
		public Assignment getMethodClosingNameAssignment_5_1_3() { return cMethodClosingNameAssignment_5_1_3; }

		//ID
		public RuleCall getMethodClosingNameIDTerminalRuleCall_5_1_3_0() { return cMethodClosingNameIDTerminalRuleCall_5_1_3_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_5_1_4() { return cDOTTerminalRuleCall_5_1_4; }

		//methodClosingMethod=ID
		public Assignment getMethodClosingMethodAssignment_5_1_5() { return cMethodClosingMethodAssignment_5_1_5; }

		//ID
		public RuleCall getMethodClosingMethodIDTerminalRuleCall_5_1_5_0() { return cMethodClosingMethodIDTerminalRuleCall_5_1_5_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_5_1_6() { return cGTTerminalRuleCall_5_1_6; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTFIELDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cFieldAction_1 = (Action)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cNAMEEQTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cNameAttributeAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cNameAttributeIDTerminalRuleCall_2_0_2_0 = (RuleCall)cNameAttributeAssignment_2_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cCOMMENTEQTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cCommentAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cCommentAnyUntilQuoteParserRuleCall_2_1_2_0 = (RuleCall)cCommentAssignment_2_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cTYPEEQTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_2_2_0 = (RuleCall)cTypeAssignment_2_2_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_2_3 = (RuleCall)cGroup_2_2.eContents().get(3);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cCONDITIONEQTerminalRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cConditionAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_2_3_2_0 = (RuleCall)cConditionAssignment_2_3_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_3_3 = (RuleCall)cGroup_2_3.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cFILTEREQTerminalRuleCall_2_4_0 = (RuleCall)cGroup_2_4.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_1 = (RuleCall)cGroup_2_4.eContents().get(1);
		private final Assignment cFilterAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cFilterTopLevelParserRuleCall_2_4_2_0 = (RuleCall)cFilterAssignment_2_4_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_4_3 = (RuleCall)cGroup_2_4.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_3_1_0_0 = (RuleCall)cGroup_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0 = (RuleCall)cChildrenAssignment_3_1_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_1 = (Assignment)cAlternatives_3_1_0_1.eContents().get(1);
		private final RuleCall cChildrenParamParserRuleCall_3_1_0_1_1_0 = (RuleCall)cChildrenAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_2 = (Assignment)cAlternatives_3_1_0_1.eContents().get(2);
		private final RuleCall cChildrenMapParserRuleCall_3_1_0_1_2_0 = (RuleCall)cChildrenAssignment_3_1_0_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_3 = (Assignment)cAlternatives_3_1_0_1.eContents().get(3);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_0_1_3_0 = (RuleCall)cChildrenAssignment_3_1_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_4 = (Assignment)cAlternatives_3_1_0_1.eContents().get(4);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_1_0_1_4_0 = (RuleCall)cChildrenAssignment_3_1_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_5 = (Assignment)cAlternatives_3_1_0_1.eContents().get(5);
		private final RuleCall cChildrenCommentClauseParserRuleCall_3_1_0_1_5_0 = (RuleCall)cChildrenAssignment_3_1_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_6 = (Assignment)cAlternatives_3_1_0_1.eContents().get(6);
		private final RuleCall cChildrenBreakParserRuleCall_3_1_0_1_6_0 = (RuleCall)cChildrenAssignment_3_1_0_1_6.eContents().get(0);
		private final RuleCall cLTSFIELDTAGTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//Field:
		//	LTFIELDTAG {Field} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (COMMENTEQ QUOTE comment=AnyUntilQuote QUOTE)? & (TYPEEQ
		//	QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)?)
		//	(XML_TAG_SINGLEEND | (GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
		//	children+=DebugTag | children+=CommentClause | children+=Break)*) LTSFIELDTAG GT);
		public ParserRule getRule() { return rule; }

		//LTFIELDTAG {Field} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (COMMENTEQ QUOTE comment=AnyUntilQuote QUOTE)? & (TYPEEQ
		//QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)?)
		//(XML_TAG_SINGLEEND | (GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=CommentClause | children+=Break)*) LTSFIELDTAG GT)
		public Group getGroup() { return cGroup; }

		//LTFIELDTAG
		public RuleCall getLTFIELDTAGTerminalRuleCall_0() { return cLTFIELDTAGTerminalRuleCall_0; }

		//{Field}
		public Action getFieldAction_1() { return cFieldAction_1; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (COMMENTEQ QUOTE comment=AnyUntilQuote QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)?
		//& (CONDITIONEQ QUOTE condition=TopLevel QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//(NAMEEQ QUOTE nameAttribute=ID QUOTE)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//NAMEEQ
		public RuleCall getNAMEEQTerminalRuleCall_2_0_0() { return cNAMEEQTerminalRuleCall_2_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_1() { return cQUOTETerminalRuleCall_2_0_1; }

		//nameAttribute=ID
		public Assignment getNameAttributeAssignment_2_0_2() { return cNameAttributeAssignment_2_0_2; }

		//ID
		public RuleCall getNameAttributeIDTerminalRuleCall_2_0_2_0() { return cNameAttributeIDTerminalRuleCall_2_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_0_3() { return cQUOTETerminalRuleCall_2_0_3; }

		//(COMMENTEQ QUOTE comment=AnyUntilQuote QUOTE)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//COMMENTEQ
		public RuleCall getCOMMENTEQTerminalRuleCall_2_1_0() { return cCOMMENTEQTerminalRuleCall_2_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_1() { return cQUOTETerminalRuleCall_2_1_1; }

		//comment=AnyUntilQuote
		public Assignment getCommentAssignment_2_1_2() { return cCommentAssignment_2_1_2; }

		//AnyUntilQuote
		public RuleCall getCommentAnyUntilQuoteParserRuleCall_2_1_2_0() { return cCommentAnyUntilQuoteParserRuleCall_2_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_3() { return cQUOTETerminalRuleCall_2_1_3; }

		//(TYPEEQ QUOTE type=ID QUOTE)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//TYPEEQ
		public RuleCall getTYPEEQTerminalRuleCall_2_2_0() { return cTYPEEQTerminalRuleCall_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_1() { return cQUOTETerminalRuleCall_2_2_1; }

		//type=ID
		public Assignment getTypeAssignment_2_2_2() { return cTypeAssignment_2_2_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_2_2_0() { return cTypeIDTerminalRuleCall_2_2_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_2_3() { return cQUOTETerminalRuleCall_2_2_3; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_2_3_0() { return cCONDITIONEQTerminalRuleCall_2_3_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_1() { return cQUOTETerminalRuleCall_2_3_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_2_3_2() { return cConditionAssignment_2_3_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_2_3_2_0() { return cConditionTopLevelParserRuleCall_2_3_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_3_3() { return cQUOTETerminalRuleCall_2_3_3; }

		//(FILTEREQ QUOTE filter=TopLevel QUOTE)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//FILTEREQ
		public RuleCall getFILTEREQTerminalRuleCall_2_4_0() { return cFILTEREQTerminalRuleCall_2_4_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_1() { return cQUOTETerminalRuleCall_2_4_1; }

		//filter=TopLevel
		public Assignment getFilterAssignment_2_4_2() { return cFilterAssignment_2_4_2; }

		//TopLevel
		public RuleCall getFilterTopLevelParserRuleCall_2_4_2_0() { return cFilterTopLevelParserRuleCall_2_4_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_4_3() { return cQUOTETerminalRuleCall_2_4_3; }

		//XML_TAG_SINGLEEND | (GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=CommentClause | children+=Break)*) LTSFIELDTAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//(GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=CommentClause | children+=Break)*) LTSFIELDTAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=CommentClause | children+=Break)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0_0() { return cGTTerminalRuleCall_3_1_0_0; }

		//(children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=CommentClause | children+=Break)*
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_0_1_0() { return cChildrenAssignment_3_1_0_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_1_0_1_1() { return cChildrenAssignment_3_1_0_1_1; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_1_0_1_1_0() { return cChildrenParamParserRuleCall_3_1_0_1_1_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_0_1_2() { return cChildrenAssignment_3_1_0_1_2; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_0_1_2_0() { return cChildrenMapParserRuleCall_3_1_0_1_2_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_0_1_3() { return cChildrenAssignment_3_1_0_1_3; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_0_1_3_0() { return cChildrenMapMethodParserRuleCall_3_1_0_1_3_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_1_0_1_4() { return cChildrenAssignment_3_1_0_1_4; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_1_0_1_4_0() { return cChildrenDebugTagParserRuleCall_3_1_0_1_4_0; }

		//children+=CommentClause
		public Assignment getChildrenAssignment_3_1_0_1_5() { return cChildrenAssignment_3_1_0_1_5; }

		//CommentClause
		public RuleCall getChildrenCommentClauseParserRuleCall_3_1_0_1_5_0() { return cChildrenCommentClauseParserRuleCall_3_1_0_1_5_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_1_0_1_6() { return cChildrenAssignment_3_1_0_1_6; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_1_0_1_6_0() { return cChildrenBreakParserRuleCall_3_1_0_1_6_0; }

		//LTSFIELDTAG
		public RuleCall getLTSFIELDTAGTerminalRuleCall_3_1_1() { return cLTSFIELDTAGTerminalRuleCall_3_1_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_2() { return cGTTerminalRuleCall_3_1_2; }
	}

	public class DebugTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DebugTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTDEBUG_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cDebugTagAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final RuleCall cVALUEEQTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueTopLevelParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCONDITIONEQTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cConditionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_2_1_2_0 = (RuleCall)cConditionAssignment_2_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_1_1_0 = (RuleCall)cExpressionAssignment_3_1_1.eContents().get(0);
		private final RuleCall cLTSDEBUG_TAGTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_3_1_3 = (RuleCall)cGroup_3_1.eContents().get(3);
		
		//DebugTag:
		//	LTDEBUG_TAG {DebugTag} ((VALUEEQ value=TopLevel)? (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND |
		//	GT expression=TopLevel? LTSDEBUG_TAG GT);
		public ParserRule getRule() { return rule; }

		//LTDEBUG_TAG {DebugTag} ((VALUEEQ value=TopLevel)? (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT
		//expression=TopLevel? LTSDEBUG_TAG GT)
		public Group getGroup() { return cGroup; }

		//LTDEBUG_TAG
		public RuleCall getLTDEBUG_TAGTerminalRuleCall_0() { return cLTDEBUG_TAGTerminalRuleCall_0; }

		//{DebugTag}
		public Action getDebugTagAction_1() { return cDebugTagAction_1; }

		//(VALUEEQ value=TopLevel)? (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2() { return cGroup_2; }

		//(VALUEEQ value=TopLevel)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//VALUEEQ
		public RuleCall getVALUEEQTerminalRuleCall_2_0_0() { return cVALUEEQTerminalRuleCall_2_0_0; }

		//value=TopLevel
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }

		//TopLevel
		public RuleCall getValueTopLevelParserRuleCall_2_0_1_0() { return cValueTopLevelParserRuleCall_2_0_1_0; }

		//(CONDITIONEQ QUOTE condition=TopLevel QUOTE)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_2_1_0() { return cCONDITIONEQTerminalRuleCall_2_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_1() { return cQUOTETerminalRuleCall_2_1_1; }

		//condition=TopLevel
		public Assignment getConditionAssignment_2_1_2() { return cConditionAssignment_2_1_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_2_1_2_0() { return cConditionTopLevelParserRuleCall_2_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_2_1_3() { return cQUOTETerminalRuleCall_2_1_3; }

		//XML_TAG_SINGLEEND | GT expression=TopLevel? LTSDEBUG_TAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//GT expression=TopLevel? LTSDEBUG_TAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0() { return cGTTerminalRuleCall_3_1_0; }

		//expression=TopLevel?
		public Assignment getExpressionAssignment_3_1_1() { return cExpressionAssignment_3_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_1_1_0() { return cExpressionTopLevelParserRuleCall_3_1_1_0; }

		//LTSDEBUG_TAG
		public RuleCall getLTSDEBUG_TAGTerminalRuleCall_3_1_2() { return cLTSDEBUG_TAGTerminalRuleCall_3_1_2; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_3() { return cGTTerminalRuleCall_3_1_3; }
	}

	public class ExpressionOrOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLTEXPRESSION_TAGTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionTagParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpressionOrOption returns Element:
		//	LTEXPRESSION_TAG ExpressionTag | Option;
		public ParserRule getRule() { return rule; }

		//LTEXPRESSION_TAG ExpressionTag | Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//LTEXPRESSION_TAG ExpressionTag
		public Group getGroup_0() { return cGroup_0; }

		//LTEXPRESSION_TAG
		public RuleCall getLTEXPRESSION_TAGTerminalRuleCall_0_0() { return cLTEXPRESSION_TAGTerminalRuleCall_0_0; }

		//ExpressionTag
		public RuleCall getExpressionTagParserRuleCall_0_1() { return cExpressionTagParserRuleCall_0_1; }

		//Option
		public RuleCall getOptionParserRuleCall_1() { return cOptionParserRuleCall_1; }
	}

	public class ExpressionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionTagAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cVALUEEQTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueTopLevelParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cCONDITIONEQTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cConditionTopLevelParserRuleCall_1_1_2_0 = (RuleCall)cConditionAssignment_1_1_2.eContents().get(0);
		private final RuleCall cQUOTETerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cXMLSPACETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final RuleCall cQUOTETerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final RuleCall cPRESERVETerminalRuleCall_1_2_3 = (RuleCall)cGroup_1_2.eContents().get(3);
		private final RuleCall cQUOTETerminalRuleCall_1_2_4 = (RuleCall)cGroup_1_2.eContents().get(4);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cAnyContentParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cClosedTagAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0 = (RuleCall)cClosedTagAssignment_2_1_2.eContents().get(0);
		
		//ExpressionTag:
		//	{ExpressionTag} ((VALUEEQ QUOTE value=TopLevel? QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel? QUOTE)? & (XMLSPACE
		//	EQUALS QUOTE PRESERVE QUOTE)?) (XML_TAG_SINGLEEND | GT AnyContent* closedTag?=EXPRESSION_END_TAG);
		public ParserRule getRule() { return rule; }

		//{ExpressionTag} ((VALUEEQ QUOTE value=TopLevel? QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel? QUOTE)? & (XMLSPACE
		//EQUALS QUOTE PRESERVE QUOTE)?) (XML_TAG_SINGLEEND | GT AnyContent* closedTag?=EXPRESSION_END_TAG)
		public Group getGroup() { return cGroup; }

		//{ExpressionTag}
		public Action getExpressionTagAction_0() { return cExpressionTagAction_0; }

		//(VALUEEQ QUOTE value=TopLevel? QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel? QUOTE)? & (XMLSPACE EQUALS QUOTE
		//PRESERVE QUOTE)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//(VALUEEQ QUOTE value=TopLevel? QUOTE)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//VALUEEQ
		public RuleCall getVALUEEQTerminalRuleCall_1_0_0() { return cVALUEEQTerminalRuleCall_1_0_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_0_1() { return cQUOTETerminalRuleCall_1_0_1; }

		//value=TopLevel?
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }

		//TopLevel
		public RuleCall getValueTopLevelParserRuleCall_1_0_2_0() { return cValueTopLevelParserRuleCall_1_0_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_0_3() { return cQUOTETerminalRuleCall_1_0_3; }

		//(CONDITIONEQ QUOTE condition=TopLevel? QUOTE)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//CONDITIONEQ
		public RuleCall getCONDITIONEQTerminalRuleCall_1_1_0() { return cCONDITIONEQTerminalRuleCall_1_1_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_1_1() { return cQUOTETerminalRuleCall_1_1_1; }

		//condition=TopLevel?
		public Assignment getConditionAssignment_1_1_2() { return cConditionAssignment_1_1_2; }

		//TopLevel
		public RuleCall getConditionTopLevelParserRuleCall_1_1_2_0() { return cConditionTopLevelParserRuleCall_1_1_2_0; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_1_3() { return cQUOTETerminalRuleCall_1_1_3; }

		//(XMLSPACE EQUALS QUOTE PRESERVE QUOTE)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//XMLSPACE
		public RuleCall getXMLSPACETerminalRuleCall_1_2_0() { return cXMLSPACETerminalRuleCall_1_2_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1_2_1() { return cEQUALSTerminalRuleCall_1_2_1; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_2_2() { return cQUOTETerminalRuleCall_1_2_2; }

		//PRESERVE
		public RuleCall getPRESERVETerminalRuleCall_1_2_3() { return cPRESERVETerminalRuleCall_1_2_3; }

		//QUOTE
		public RuleCall getQUOTETerminalRuleCall_1_2_4() { return cQUOTETerminalRuleCall_1_2_4; }

		//XML_TAG_SINGLEEND | GT AnyContent* closedTag?=EXPRESSION_END_TAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_0; }

		//GT AnyContent* closedTag?=EXPRESSION_END_TAG
		public Group getGroup_2_1() { return cGroup_2_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_2_1_0() { return cGTTerminalRuleCall_2_1_0; }

		//AnyContent*
		public RuleCall getAnyContentParserRuleCall_2_1_1() { return cAnyContentParserRuleCall_2_1_1; }

		//closedTag?=EXPRESSION_END_TAG
		public Assignment getClosedTagAssignment_2_1_2() { return cClosedTagAssignment_2_1_2; }

		//EXPRESSION_END_TAG
		public RuleCall getClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0() { return cClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLTOPTIONTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cOptionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesNonExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cLTSOPTIONTAGTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cGTTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//Option:
		//	LTOPTIONTAG {Option} attributes+=NonExpression* (XML_TAG_SINGLEEND | GT LTSOPTIONTAG GT);
		public ParserRule getRule() { return rule; }

		//LTOPTIONTAG {Option} attributes+=NonExpression* (XML_TAG_SINGLEEND | GT LTSOPTIONTAG GT)
		public Group getGroup() { return cGroup; }

		//LTOPTIONTAG
		public RuleCall getLTOPTIONTAGTerminalRuleCall_0() { return cLTOPTIONTAGTerminalRuleCall_0; }

		//{Option}
		public Action getOptionAction_1() { return cOptionAction_1; }

		//attributes+=NonExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//NonExpression
		public RuleCall getAttributesNonExpressionParserRuleCall_2_0() { return cAttributesNonExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | GT LTSOPTIONTAG GT
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//GT LTSOPTIONTAG GT
		public Group getGroup_3_1() { return cGroup_3_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_0() { return cGTTerminalRuleCall_3_1_0; }

		//LTSOPTIONTAG
		public RuleCall getLTSOPTIONTAGTerminalRuleCall_3_1_1() { return cLTSOPTIONTAGTerminalRuleCall_3_1_1; }

		//GT
		public RuleCall getGTTerminalRuleCall_3_1_2() { return cGTTerminalRuleCall_3_1_2; }
	}
	
	
	private TmlElements pTml;
	private TerminalRule tXMLHEAD;
	private TerminalRule tXMLCOMMENT;
	private TerminalRule tLTNAVASCRIPTTAG;
	private TerminalRule tLTSNAVASCRIPTTAG;
	private TerminalRule tLTTSLTAG;
	private TerminalRule tLTSTSLTAG;
	private TerminalRule tQUOTE;
	private TerminalRule tLT;
	private TerminalRule tNAMEEQ;
	private TerminalRule tNOTESEQ;
	private TerminalRule tIDEQ;
	private TerminalRule tREPOSITORYEQ;
	private TerminalRule tAUTHOREQ;
	private TerminalRule tXMLNS;
	private TerminalRule tSCHEMALOCATIONEQ;
	private TerminalRule tNONAMESPACESCHEMALOCATIONEQ;
	private TerminalRule tTYPEEQ;
	private TerminalRule tMODEEQ;
	private TerminalRule tSCRIPTEQ;
	private TerminalRule tCONDITIONEQ;
	private TerminalRule tFILTEREQ;
	private TerminalRule tOBJECTEQ;
	private TerminalRule tCOUNTEQ;
	private TerminalRule tREFEQ;
	private TerminalRule tLENGTHEQ;
	private TerminalRule tCARDINALITYEQ;
	private TerminalRule tSUBTYPESEQ;
	private TerminalRule tDIRECTIONEQ;
	private TerminalRule tDESCRIPTIONEQ;
	private TerminalRule tVALUEEQ;
	private TerminalRule tXMLSPACE;
	private TerminalRule tPRESERVE;
	private TerminalRule tCOMMENTEQ;
	private TerminalRule tLTCOMMENT;
	private TerminalRule tLTSCOMMENT;
	private TerminalRule tXML_START_ENDTAG;
	private TerminalRule tGT;
	private TerminalRule tXML_TAG_SINGLEEND;
	private TerminalRule tLTMAPTAG;
	private TerminalRule tLTSMAPTAG;
	private TerminalRule tLTINCLUDETAG;
	private TerminalRule tLTSINCLUDETAG;
	private TerminalRule tLTPROPERTYTAG;
	private TerminalRule tLTSPROPERTYTAG;
	private TerminalRule tLTREQUIREDTAG;
	private TerminalRule tLTSREQUIREDTAG;
	private TerminalRule tLTVALIDATIONSTAG;
	private TerminalRule tLTSVALIDATIONSTAG;
	private TerminalRule tLTCHECKTAG;
	private TerminalRule tLTSCHECKTAG;
	private TerminalRule tLTBREAKTAG;
	private TerminalRule tLTSBREAKTAG;
	private TerminalRule tLTOPTIONTAG;
	private TerminalRule tLTSOPTIONTAG;
	private TerminalRule tEQUALS;
	private TerminalRule tLTEXPRESSION_TAG;
	private TerminalRule tEXPRESSION_END_TAG;
	private TerminalRule tLTPARAMTAG;
	private TerminalRule tLTSPARAMTAG;
	private TerminalRule tMESSAGEEQ;
	private TerminalRule tLTMESSAGETAG;
	private TerminalRule tLTSMESSAGETAG;
	private TerminalRule tLTMETHODTAG;
	private TerminalRule tLTSMETHODTAG;
	private AnyContentElements pAnyContent;
	private AnyUntilQuoteElements pAnyUntilQuote;
	private TerminalRule tLTMETHODSTAG;
	private TerminalRule tLTSMETHODSTAG;
	private TerminalRule tLTFIELDTAG;
	private TerminalRule tLTSFIELDTAG;
	private TerminalRule tLTDEBUG_TAG;
	private TerminalRule tLTSDEBUG_TAG;
	private TerminalRule tNAVASCRIPT_END;
	private AttributeNameElements pAttributeName;
	private ExpressionElements pExpression;
	private NonExpressionElements pNonExpression;
	private MethodsElements pMethods;
	private MethodElements pMethod;
	private ValidationsElements pValidations;
	private CheckElements pCheck;
	private CommentClauseElements pCommentClause;
	private BreakElements pBreak;
	private FilePathElements pFilePath;
	private IncludeElements pInclude;
	private MessageElements pMessage;
	private MapElements pMap;
	private MapIdElements pMapId;
	private RequiredElements pRequired;
	private PropertyElements pProperty;
	private ParamElements pParam;
	private MapMethodElements pMapMethod;
	private FieldElements pField;
	private DebugTagElements pDebugTag;
	private ExpressionOrOptionElements pExpressionOrOption;
	private ExpressionTagElements pExpressionTag;
	private OptionElements pOption;
	
	private final Grammar grammar;

	private NavajoExpressionGrammarAccess gaNavajoExpression;

	@Inject
	public TslGrammarAccess(GrammarProvider grammarProvider,
		NavajoExpressionGrammarAccess gaNavajoExpression) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaNavajoExpression = gaNavajoExpression;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.dexels.navajo.dsl.tsl.Tsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public NavajoExpressionGrammarAccess getNavajoExpressionGrammarAccess() {
		return gaNavajoExpression;
	}

	
	////xsi:noNamespaceSchemaLocation
	//Tml:
	//	{Tml} XMLHEAD? (LTTSLTAG | LTNAVASCRIPTTAG) ((NOTESEQ QUOTE AnyUntilQuote QUOTE)? & (REPOSITORYEQ QUOTE AnyUntilQuote
	//	QUOTE)? & (IDEQ QUOTE AnyUntilQuote QUOTE)? & (AUTHOREQ QUOTE AnyUntilQuote QUOTE)? & (XMLNS EQUALS QUOTE
	//	AnyUntilQuote QUOTE)? & (XMLNS COLON ID EQUALS QUOTE AnyUntilQuote QUOTE)? & (ID COLON SCHEMALOCATIONEQ QUOTE
	//	AnyUntilQuote QUOTE)? & (ID COLON NONAMESPACESCHEMALOCATIONEQ QUOTE AnyUntilQuote QUOTE)?) (GT (children+=Message |
	//	children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
	//	children+=CommentClause)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
	public TmlElements getTmlAccess() {
		return (pTml != null) ? pTml : (pTml = new TmlElements());
	}
	
	public ParserRule getTmlRule() {
		return getTmlAccess().getRule();
	}

	//terminal XMLHEAD:
	//	"<?"->"?>";
	public TerminalRule getXMLHEADRule() {
		return (tXMLHEAD != null) ? tXMLHEAD : (tXMLHEAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLHEAD"));
	} 

	//terminal XMLCOMMENT:
	//	"<!--"->"-->";
	public TerminalRule getXMLCOMMENTRule() {
		return (tXMLCOMMENT != null) ? tXMLCOMMENT : (tXMLCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLCOMMENT"));
	} 

	////terminal QUOTEQ: '"=';	
	////terminal SEMICOLONQUOTE: ';"';
	//terminal LTNAVASCRIPTTAG:
	//	"<navascript";
	public TerminalRule getLTNAVASCRIPTTAGRule() {
		return (tLTNAVASCRIPTTAG != null) ? tLTNAVASCRIPTTAG : (tLTNAVASCRIPTTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTNAVASCRIPTTAG"));
	} 

	//terminal LTSNAVASCRIPTTAG:
	//	"</navascript";
	public TerminalRule getLTSNAVASCRIPTTAGRule() {
		return (tLTSNAVASCRIPTTAG != null) ? tLTSNAVASCRIPTTAG : (tLTSNAVASCRIPTTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSNAVASCRIPTTAG"));
	} 

	//terminal LTTSLTAG:
	//	"<tsl";
	public TerminalRule getLTTSLTAGRule() {
		return (tLTTSLTAG != null) ? tLTTSLTAG : (tLTTSLTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTTSLTAG"));
	} 

	//terminal LTSTSLTAG:
	//	"</tsl";
	public TerminalRule getLTSTSLTAGRule() {
		return (tLTSTSLTAG != null) ? tLTSTSLTAG : (tLTSTSLTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSTSLTAG"));
	} 

	////terminal NAVASCRIPT_START:
	////	'<navascript';
	//terminal QUOTE:
	//	"\"";
	public TerminalRule getQUOTERule() {
		return (tQUOTE != null) ? tQUOTE : (tQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTE"));
	} 

	//terminal LT:
	//	"<";
	public TerminalRule getLTRule() {
		return (tLT != null) ? tLT : (tLT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LT"));
	} 

	//terminal NAMEEQ:
	//	"name=";
	public TerminalRule getNAMEEQRule() {
		return (tNAMEEQ != null) ? tNAMEEQ : (tNAMEEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAMEEQ"));
	} 

	//terminal NOTESEQ:
	//	"notes=";
	public TerminalRule getNOTESEQRule() {
		return (tNOTESEQ != null) ? tNOTESEQ : (tNOTESEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOTESEQ"));
	} 

	//terminal IDEQ:
	//	"id=";
	public TerminalRule getIDEQRule() {
		return (tIDEQ != null) ? tIDEQ : (tIDEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDEQ"));
	} 

	//terminal REPOSITORYEQ:
	//	"repository=";
	public TerminalRule getREPOSITORYEQRule() {
		return (tREPOSITORYEQ != null) ? tREPOSITORYEQ : (tREPOSITORYEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REPOSITORYEQ"));
	} 

	//terminal AUTHOREQ:
	//	"author=";
	public TerminalRule getAUTHOREQRule() {
		return (tAUTHOREQ != null) ? tAUTHOREQ : (tAUTHOREQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AUTHOREQ"));
	} 

	//terminal XMLNS:
	//	"xmlns";
	public TerminalRule getXMLNSRule() {
		return (tXMLNS != null) ? tXMLNS : (tXMLNS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLNS"));
	} 

	//terminal SCHEMALOCATIONEQ:
	//	"schemaLocation=";
	public TerminalRule getSCHEMALOCATIONEQRule() {
		return (tSCHEMALOCATIONEQ != null) ? tSCHEMALOCATIONEQ : (tSCHEMALOCATIONEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCHEMALOCATIONEQ"));
	} 

	//terminal NONAMESPACESCHEMALOCATIONEQ:
	//	"noNamespaceSchemaLocation=";
	public TerminalRule getNONAMESPACESCHEMALOCATIONEQRule() {
		return (tNONAMESPACESCHEMALOCATIONEQ != null) ? tNONAMESPACESCHEMALOCATIONEQ : (tNONAMESPACESCHEMALOCATIONEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NONAMESPACESCHEMALOCATIONEQ"));
	} 

	//terminal TYPEEQ:
	//	"type=";
	public TerminalRule getTYPEEQRule() {
		return (tTYPEEQ != null) ? tTYPEEQ : (tTYPEEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TYPEEQ"));
	} 

	//terminal MODEEQ:
	//	"mode=";
	public TerminalRule getMODEEQRule() {
		return (tMODEEQ != null) ? tMODEEQ : (tMODEEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MODEEQ"));
	} 

	//terminal SCRIPTEQ:
	//	"script=";
	public TerminalRule getSCRIPTEQRule() {
		return (tSCRIPTEQ != null) ? tSCRIPTEQ : (tSCRIPTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCRIPTEQ"));
	} 

	//terminal CONDITIONEQ:
	//	"condition=";
	public TerminalRule getCONDITIONEQRule() {
		return (tCONDITIONEQ != null) ? tCONDITIONEQ : (tCONDITIONEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONDITIONEQ"));
	} 

	//terminal FILTEREQ:
	//	"filter=";
	public TerminalRule getFILTEREQRule() {
		return (tFILTEREQ != null) ? tFILTEREQ : (tFILTEREQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FILTEREQ"));
	} 

	//terminal OBJECTEQ:
	//	"object=";
	public TerminalRule getOBJECTEQRule() {
		return (tOBJECTEQ != null) ? tOBJECTEQ : (tOBJECTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OBJECTEQ"));
	} 

	//terminal COUNTEQ:
	//	"count=";
	public TerminalRule getCOUNTEQRule() {
		return (tCOUNTEQ != null) ? tCOUNTEQ : (tCOUNTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COUNTEQ"));
	} 

	//terminal REFEQ:
	//	"ref=";
	public TerminalRule getREFEQRule() {
		return (tREFEQ != null) ? tREFEQ : (tREFEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REFEQ"));
	} 

	//terminal LENGTHEQ:
	//	"length=";
	public TerminalRule getLENGTHEQRule() {
		return (tLENGTHEQ != null) ? tLENGTHEQ : (tLENGTHEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LENGTHEQ"));
	} 

	//terminal CARDINALITYEQ:
	//	"cardinality=";
	public TerminalRule getCARDINALITYEQRule() {
		return (tCARDINALITYEQ != null) ? tCARDINALITYEQ : (tCARDINALITYEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CARDINALITYEQ"));
	} 

	//terminal SUBTYPESEQ:
	//	"subtypes=";
	public TerminalRule getSUBTYPESEQRule() {
		return (tSUBTYPESEQ != null) ? tSUBTYPESEQ : (tSUBTYPESEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SUBTYPESEQ"));
	} 

	//terminal DIRECTIONEQ:
	//	"direction=";
	public TerminalRule getDIRECTIONEQRule() {
		return (tDIRECTIONEQ != null) ? tDIRECTIONEQ : (tDIRECTIONEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIRECTIONEQ"));
	} 

	//terminal DESCRIPTIONEQ:
	//	"description=";
	public TerminalRule getDESCRIPTIONEQRule() {
		return (tDESCRIPTIONEQ != null) ? tDESCRIPTIONEQ : (tDESCRIPTIONEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DESCRIPTIONEQ"));
	} 

	//terminal VALUEEQ:
	//	"value=";
	public TerminalRule getVALUEEQRule() {
		return (tVALUEEQ != null) ? tVALUEEQ : (tVALUEEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALUEEQ"));
	} 

	//terminal XMLSPACE:
	//	"xml:space";
	public TerminalRule getXMLSPACERule() {
		return (tXMLSPACE != null) ? tXMLSPACE : (tXMLSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLSPACE"));
	} 

	//terminal PRESERVE:
	//	"preserve";
	public TerminalRule getPRESERVERule() {
		return (tPRESERVE != null) ? tPRESERVE : (tPRESERVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRESERVE"));
	} 

	//terminal COMMENTEQ:
	//	"comment=";
	public TerminalRule getCOMMENTEQRule() {
		return (tCOMMENTEQ != null) ? tCOMMENTEQ : (tCOMMENTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENTEQ"));
	} 

	//terminal LTCOMMENT:
	//	"<comment";
	public TerminalRule getLTCOMMENTRule() {
		return (tLTCOMMENT != null) ? tLTCOMMENT : (tLTCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTCOMMENT"));
	} 

	//terminal LTSCOMMENT:
	//	"</comment";
	public TerminalRule getLTSCOMMENTRule() {
		return (tLTSCOMMENT != null) ? tLTSCOMMENT : (tLTSCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSCOMMENT"));
	} 

	//terminal XML_START_ENDTAG:
	//	"</";
	public TerminalRule getXML_START_ENDTAGRule() {
		return (tXML_START_ENDTAG != null) ? tXML_START_ENDTAG : (tXML_START_ENDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_START_ENDTAG"));
	} 

	//terminal GT:
	//	">";
	public TerminalRule getGTRule() {
		return (tGT != null) ? tGT : (tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GT"));
	} 

	//terminal XML_TAG_SINGLEEND:
	//	"/>";
	public TerminalRule getXML_TAG_SINGLEENDRule() {
		return (tXML_TAG_SINGLEEND != null) ? tXML_TAG_SINGLEEND : (tXML_TAG_SINGLEEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_SINGLEEND"));
	} 

	////terminal MAP_METHOD_STARTTAG_START: '<_';
	////terminal MAP_METHOD_ENDTAG_START: '</_';
	////terminal XML_TAG_START: '<';
	//terminal LTMAPTAG:
	//	"<map";
	public TerminalRule getLTMAPTAGRule() {
		return (tLTMAPTAG != null) ? tLTMAPTAG : (tLTMAPTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTMAPTAG"));
	} 

	//terminal LTSMAPTAG:
	//	"</map";
	public TerminalRule getLTSMAPTAGRule() {
		return (tLTSMAPTAG != null) ? tLTSMAPTAG : (tLTSMAPTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSMAPTAG"));
	} 

	//terminal LTINCLUDETAG:
	//	"<include";
	public TerminalRule getLTINCLUDETAGRule() {
		return (tLTINCLUDETAG != null) ? tLTINCLUDETAG : (tLTINCLUDETAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTINCLUDETAG"));
	} 

	//terminal LTSINCLUDETAG:
	//	"</include";
	public TerminalRule getLTSINCLUDETAGRule() {
		return (tLTSINCLUDETAG != null) ? tLTSINCLUDETAG : (tLTSINCLUDETAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSINCLUDETAG"));
	} 

	//terminal LTPROPERTYTAG:
	//	"<property";
	public TerminalRule getLTPROPERTYTAGRule() {
		return (tLTPROPERTYTAG != null) ? tLTPROPERTYTAG : (tLTPROPERTYTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTPROPERTYTAG"));
	} 

	//terminal LTSPROPERTYTAG:
	//	"</property";
	public TerminalRule getLTSPROPERTYTAGRule() {
		return (tLTSPROPERTYTAG != null) ? tLTSPROPERTYTAG : (tLTSPROPERTYTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSPROPERTYTAG"));
	} 

	//terminal LTREQUIREDTAG:
	//	"<required";
	public TerminalRule getLTREQUIREDTAGRule() {
		return (tLTREQUIREDTAG != null) ? tLTREQUIREDTAG : (tLTREQUIREDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTREQUIREDTAG"));
	} 

	//terminal LTSREQUIREDTAG:
	//	"</required";
	public TerminalRule getLTSREQUIREDTAGRule() {
		return (tLTSREQUIREDTAG != null) ? tLTSREQUIREDTAG : (tLTSREQUIREDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSREQUIREDTAG"));
	} 

	//terminal LTVALIDATIONSTAG:
	//	"<validations";
	public TerminalRule getLTVALIDATIONSTAGRule() {
		return (tLTVALIDATIONSTAG != null) ? tLTVALIDATIONSTAG : (tLTVALIDATIONSTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTVALIDATIONSTAG"));
	} 

	//terminal LTSVALIDATIONSTAG:
	//	"</validations";
	public TerminalRule getLTSVALIDATIONSTAGRule() {
		return (tLTSVALIDATIONSTAG != null) ? tLTSVALIDATIONSTAG : (tLTSVALIDATIONSTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSVALIDATIONSTAG"));
	} 

	//terminal LTCHECKTAG:
	//	"<check";
	public TerminalRule getLTCHECKTAGRule() {
		return (tLTCHECKTAG != null) ? tLTCHECKTAG : (tLTCHECKTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTCHECKTAG"));
	} 

	//terminal LTSCHECKTAG:
	//	"</check";
	public TerminalRule getLTSCHECKTAGRule() {
		return (tLTSCHECKTAG != null) ? tLTSCHECKTAG : (tLTSCHECKTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSCHECKTAG"));
	} 

	//terminal LTBREAKTAG:
	//	"<break";
	public TerminalRule getLTBREAKTAGRule() {
		return (tLTBREAKTAG != null) ? tLTBREAKTAG : (tLTBREAKTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTBREAKTAG"));
	} 

	//terminal LTSBREAKTAG:
	//	"</break";
	public TerminalRule getLTSBREAKTAGRule() {
		return (tLTSBREAKTAG != null) ? tLTSBREAKTAG : (tLTSBREAKTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSBREAKTAG"));
	} 

	//terminal LTOPTIONTAG:
	//	"<option";
	public TerminalRule getLTOPTIONTAGRule() {
		return (tLTOPTIONTAG != null) ? tLTOPTIONTAG : (tLTOPTIONTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTOPTIONTAG"));
	} 

	//terminal LTSOPTIONTAG:
	//	"</option";
	public TerminalRule getLTSOPTIONTAGRule() {
		return (tLTSOPTIONTAG != null) ? tLTSOPTIONTAG : (tLTSOPTIONTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSOPTIONTAG"));
	} 

	//terminal EQUALS:
	//	"=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal LTEXPRESSION_TAG:
	//	"<expression";
	public TerminalRule getLTEXPRESSION_TAGRule() {
		return (tLTEXPRESSION_TAG != null) ? tLTEXPRESSION_TAG : (tLTEXPRESSION_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTEXPRESSION_TAG"));
	} 

	//terminal EXPRESSION_END_TAG:
	//	"</expression" GT;
	public TerminalRule getEXPRESSION_END_TAGRule() {
		return (tEXPRESSION_END_TAG != null) ? tEXPRESSION_END_TAG : (tEXPRESSION_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_END_TAG"));
	} 

	//terminal LTPARAMTAG:
	//	"<param";
	public TerminalRule getLTPARAMTAGRule() {
		return (tLTPARAMTAG != null) ? tLTPARAMTAG : (tLTPARAMTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTPARAMTAG"));
	} 

	//terminal LTSPARAMTAG:
	//	"</param";
	public TerminalRule getLTSPARAMTAGRule() {
		return (tLTSPARAMTAG != null) ? tLTSPARAMTAG : (tLTSPARAMTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSPARAMTAG"));
	} 

	//terminal MESSAGEEQ:
	//	"message=";
	public TerminalRule getMESSAGEEQRule() {
		return (tMESSAGEEQ != null) ? tMESSAGEEQ : (tMESSAGEEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGEEQ"));
	} 

	//terminal LTMESSAGETAG:
	//	"<message";
	public TerminalRule getLTMESSAGETAGRule() {
		return (tLTMESSAGETAG != null) ? tLTMESSAGETAG : (tLTMESSAGETAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTMESSAGETAG"));
	} 

	//terminal LTSMESSAGETAG:
	//	"</message";
	public TerminalRule getLTSMESSAGETAGRule() {
		return (tLTSMESSAGETAG != null) ? tLTSMESSAGETAG : (tLTSMESSAGETAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSMESSAGETAG"));
	} 

	//terminal LTMETHODTAG:
	//	"<method";
	public TerminalRule getLTMETHODTAGRule() {
		return (tLTMETHODTAG != null) ? tLTMETHODTAG : (tLTMETHODTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTMETHODTAG"));
	} 

	//terminal LTSMETHODTAG:
	//	"</method";
	public TerminalRule getLTSMETHODTAGRule() {
		return (tLTSMETHODTAG != null) ? tLTSMETHODTAG : (tLTSMETHODTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSMETHODTAG"));
	} 

	//AnyContent:
	//	AnyExpression | QUOTE | EQUALS;
	public AnyContentElements getAnyContentAccess() {
		return (pAnyContent != null) ? pAnyContent : (pAnyContent = new AnyContentElements());
	}
	
	public ParserRule getAnyContentRule() {
		return getAnyContentAccess().getRule();
	}

	//AnyUntilQuote:
	//	AnyContent*;
	public AnyUntilQuoteElements getAnyUntilQuoteAccess() {
		return (pAnyUntilQuote != null) ? pAnyUntilQuote : (pAnyUntilQuote = new AnyUntilQuoteElements());
	}
	
	public ParserRule getAnyUntilQuoteRule() {
		return getAnyUntilQuoteAccess().getRule();
	}

	//terminal LTMETHODSTAG:
	//	"<methods";
	public TerminalRule getLTMETHODSTAGRule() {
		return (tLTMETHODSTAG != null) ? tLTMETHODSTAG : (tLTMETHODSTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTMETHODSTAG"));
	} 

	//terminal LTSMETHODSTAG:
	//	"</methods";
	public TerminalRule getLTSMETHODSTAGRule() {
		return (tLTSMETHODSTAG != null) ? tLTSMETHODSTAG : (tLTSMETHODSTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSMETHODSTAG"));
	} 

	//terminal LTFIELDTAG:
	//	"<field";
	public TerminalRule getLTFIELDTAGRule() {
		return (tLTFIELDTAG != null) ? tLTFIELDTAG : (tLTFIELDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTFIELDTAG"));
	} 

	//terminal LTSFIELDTAG:
	//	"</field";
	public TerminalRule getLTSFIELDTAGRule() {
		return (tLTSFIELDTAG != null) ? tLTSFIELDTAG : (tLTSFIELDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSFIELDTAG"));
	} 

	//terminal LTDEBUG_TAG:
	//	"<debug";
	public TerminalRule getLTDEBUG_TAGRule() {
		return (tLTDEBUG_TAG != null) ? tLTDEBUG_TAG : (tLTDEBUG_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTDEBUG_TAG"));
	} 

	//terminal LTSDEBUG_TAG:
	//	"</debug";
	public TerminalRule getLTSDEBUG_TAGRule() {
		return (tLTSDEBUG_TAG != null) ? tLTSDEBUG_TAG : (tLTSDEBUG_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTSDEBUG_TAG"));
	} 

	//terminal NAVASCRIPT_END:
	//	"</navascript" GT //XML_START_ENDTAG NAVASCRIPT_KEYWORD GT;
	//	| "</tsl" GT;
	public TerminalRule getNAVASCRIPT_ENDRule() {
		return (tNAVASCRIPT_END != null) ? tNAVASCRIPT_END : (tNAVASCRIPT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_END"));
	} 

	////
	////Garbage returns ecore::EString:
	////	(ID|DOT|PARENT|DOLLAR|TML_SEPARATOR|NUMBER|COMMA|SQBRACKET_OPEN|SQBRACKET_CLOSE|AT|COLON|BRACKET_OPEN|BRACKET_CLOSE|TML_EXISTS|EQUALS|NEQUALS|PLUS|MINUS|MULTIPLY|SEMICOLON)*
	////	;
	//// might need to add a lot more kywords here 'message' | 'comment' 
	//AttributeName:
	//	ID;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//Expression returns PossibleExpression:
	//	key=ID EQUALS QUOTE expressionValue=TopLevel endToken=QUOTE;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//NonExpression returns PossibleExpression:
	//	(namespace=ID COLON)? key=AttributeName EQUALS (QUOTE (AnyExpression | EXPRESSION_END_TAG)* QUOTE);
	public NonExpressionElements getNonExpressionAccess() {
		return (pNonExpression != null) ? pNonExpression : (pNonExpression = new NonExpressionElements());
	}
	
	public ParserRule getNonExpressionRule() {
		return getNonExpressionAccess().getRule();
	}

	//Methods:
	//	LTMETHODSTAG {Methods} (GT method+=Method* LTSMETHODSTAG GT | XML_TAG_SINGLEEND);
	public MethodsElements getMethodsAccess() {
		return (pMethods != null) ? pMethods : (pMethods = new MethodsElements());
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}

	//Method:
	//	LTMETHODTAG {Method} (NAMEEQ QUOTE nameAttribute=ID QUOTE)? (GT children+=Required* closedTag?=LTSMETHODTAG GT |
	//	XML_TAG_SINGLEEND);
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Validations:
	//	LTVALIDATIONSTAG {Validations} (GT children+=Check* closedTag?=LTSVALIDATIONSTAG GT | XML_TAG_SINGLEEND);
	public ValidationsElements getValidationsAccess() {
		return (pValidations != null) ? pValidations : (pValidations = new ValidationsElements());
	}
	
	public ParserRule getValidationsRule() {
		return getValidationsAccess().getRule();
	}

	//Check:
	//	LTCHECKTAG {Check} attributes+=NonExpression* (GT expression=TopLevel closedTag?=LTSCHECKTAG GT | XML_TAG_SINGLEEND);
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//CommentClause returns Comment:
	//	LTCOMMENT {Comment} attributes+=Expression* (GT closedTag?=LTSCOMMENT GT | XML_TAG_SINGLEEND);
	public CommentClauseElements getCommentClauseAccess() {
		return (pCommentClause != null) ? pCommentClause : (pCommentClause = new CommentClauseElements());
	}
	
	public ParserRule getCommentClauseRule() {
		return getCommentClauseAccess().getRule();
	}

	//Break:
	//	LTBREAKTAG {Break} attributes+=Expression* (GT //		expression=TopLevel
	//	LTSBREAKTAG GT | XML_TAG_SINGLEEND);
	public BreakElements getBreakAccess() {
		return (pBreak != null) ? pBreak : (pBreak = new BreakElements());
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}

	//FilePath returns ecore::EString:
	//	(TML_SEPARATOR | PARENT | DOT | ID)+;
	public FilePathElements getFilePathAccess() {
		return (pFilePath != null) ? pFilePath : (pFilePath = new FilePathElements());
	}
	
	public ParserRule getFilePathRule() {
		return getFilePathAccess().getRule();
	}

	//// create Include entity in Model
	//Include returns Method:
	//	LTINCLUDETAG {Method} (SCRIPTEQ QUOTE AnyUntilQuote QUOTE)? (LTSINCLUDETAG | XML_TAG_SINGLEEND);
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Message:
	//	LTMESSAGETAG {Message} ((COUNTEQ QUOTE count=NUMBER QUOTE)? & (MODEEQ QUOTE mode=ID QUOTE)? & (NAMEEQ QUOTE
	//	nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (GT
	//	(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
	//	children+=Field | children+=CommentClause | children+=Break)* LTSMESSAGETAG GT | XML_TAG_SINGLEEND);
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Map:
	//	LTMAPTAG {Map} (DOT mapName=ID)? ((REFEQ QUOTE ref+=PathElement+ QUOTE)? & (OBJECTEQ QUOTE object+=PathElement+
	//	QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)? & (ID EQUALS QUOTE
	//	expressions+=TopLevel QUOTE)* & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT
	//	(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
	//	children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* LTSMAPTAG (DOT
	//	mapClosingName=MapId)? closedTag?=GT);
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//MapId:
	//	ID;
	public MapIdElements getMapIdAccess() {
		return (pMapId != null) ? pMapId : (pMapId = new MapIdElements());
	}
	
	public ParserRule getMapIdRule() {
		return getMapIdAccess().getRule();
	}

	//Required:
	//	LTREQUIREDTAG {Required} (MESSAGEEQ QUOTE nameAttribute=ID QUOTE)? (XML_TAG_SINGLEEND | GT LTSREQUIREDTAG GT);
	public RequiredElements getRequiredAccess() {
		return (pRequired != null) ? pRequired : (pRequired = new RequiredElements());
	}
	
	public ParserRule getRequiredRule() {
		return getRequiredAccess().getRule();
	}

	//Property:
	//	LTPROPERTYTAG {Property} ((DESCRIPTIONEQ QUOTE description=AnyUntilQuote QUOTE)? & (LENGTHEQ QUOTE length=NUMBER
	//	QUOTE)? & (CARDINALITYEQ QUOTE cardinality=(ID | PLUS) QUOTE)? & (DIRECTIONEQ QUOTE direction=ID QUOTE)? & (SUBTYPESEQ
	//	QUOTE subtypes=ID QUOTE)? & (NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ
	//	QUOTE condition=TopLevel QUOTE)? & (VALUEEQ QUOTE rawValue=AnyUntilQuote QUOTE)?) (XML_TAG_SINGLEEND | GT
	//	(children+=ExpressionOrOption | children+=Map | children+=MapMethod)* LTSPROPERTYTAG GT);
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Param:
	//	LTPARAMTAG {Param} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (TYPEEQ QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE
	//	condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption | children+=Map |
	//	children+=MapMethod)* LTSPARAMTAG GT);
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//MapMethod:
	//	LT mapName=ID DOT methodName=ID attributes+=Expression* (XML_TAG_SINGLEEND | GT (children+=ExpressionOrOption |
	//	children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
	//	children+=Field | children+=CommentClause | children+=Break | content+=AnyContent)* closedTag?=XML_START_ENDTAG
	//	methodClosingName=ID DOT methodClosingMethod=ID GT);
	public MapMethodElements getMapMethodAccess() {
		return (pMapMethod != null) ? pMapMethod : (pMapMethod = new MapMethodElements());
	}
	
	public ParserRule getMapMethodRule() {
		return getMapMethodAccess().getRule();
	}

	//Field:
	//	LTFIELDTAG {Field} ((NAMEEQ QUOTE nameAttribute=ID QUOTE)? & (COMMENTEQ QUOTE comment=AnyUntilQuote QUOTE)? & (TYPEEQ
	//	QUOTE type=ID QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel QUOTE)? & (FILTEREQ QUOTE filter=TopLevel QUOTE)?)
	//	(XML_TAG_SINGLEEND | (GT (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
	//	children+=DebugTag | children+=CommentClause | children+=Break)*) LTSFIELDTAG GT);
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//DebugTag:
	//	LTDEBUG_TAG {DebugTag} ((VALUEEQ value=TopLevel)? (CONDITIONEQ QUOTE condition=TopLevel QUOTE)?) (XML_TAG_SINGLEEND |
	//	GT expression=TopLevel? LTSDEBUG_TAG GT);
	public DebugTagElements getDebugTagAccess() {
		return (pDebugTag != null) ? pDebugTag : (pDebugTag = new DebugTagElements());
	}
	
	public ParserRule getDebugTagRule() {
		return getDebugTagAccess().getRule();
	}

	//ExpressionOrOption returns Element:
	//	LTEXPRESSION_TAG ExpressionTag | Option;
	public ExpressionOrOptionElements getExpressionOrOptionAccess() {
		return (pExpressionOrOption != null) ? pExpressionOrOption : (pExpressionOrOption = new ExpressionOrOptionElements());
	}
	
	public ParserRule getExpressionOrOptionRule() {
		return getExpressionOrOptionAccess().getRule();
	}

	//ExpressionTag:
	//	{ExpressionTag} ((VALUEEQ QUOTE value=TopLevel? QUOTE)? & (CONDITIONEQ QUOTE condition=TopLevel? QUOTE)? & (XMLSPACE
	//	EQUALS QUOTE PRESERVE QUOTE)?) (XML_TAG_SINGLEEND | GT AnyContent* closedTag?=EXPRESSION_END_TAG);
	public ExpressionTagElements getExpressionTagAccess() {
		return (pExpressionTag != null) ? pExpressionTag : (pExpressionTag = new ExpressionTagElements());
	}
	
	public ParserRule getExpressionTagRule() {
		return getExpressionTagAccess().getRule();
	}

	//Option:
	//	LTOPTIONTAG {Option} attributes+=NonExpression* (XML_TAG_SINGLEEND | GT LTSOPTIONTAG GT);
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//TopLevel:
	//	toplevelExpression=OrExpression;
	public NavajoExpressionGrammarAccess.TopLevelElements getTopLevelAccess() {
		return gaNavajoExpression.getTopLevelAccess();
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	//terminal XML_GT:
	//	"&gt;";
	public TerminalRule getXML_GTRule() {
		return gaNavajoExpression.getXML_GTRule();
	} 

	//terminal XML_LT:
	//	"&lt;";
	public TerminalRule getXML_LTRule() {
		return gaNavajoExpression.getXML_LTRule();
	} 

	//terminal XML_GTEQ:
	//	"&gt;=";
	public TerminalRule getXML_GTEQRule() {
		return gaNavajoExpression.getXML_GTEQRule();
	} 

	//terminal XML_LTEQ:
	//	"&lt;=";
	public TerminalRule getXML_LTEQRule() {
		return gaNavajoExpression.getXML_LTEQRule();
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return gaNavajoExpression.getDOTRule();
	} 

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"+ (DOT "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return gaNavajoExpression.getNUMBERRule();
	} 

	//terminal BADNUMBER:
	//	"0".."9"+ DOT;
	public TerminalRule getBADNUMBERRule() {
		return gaNavajoExpression.getBADNUMBERRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaNavajoExpression.getWSRule();
	} 

	//terminal TRUE:
	//	"true" | "TRUE";
	public TerminalRule getTRUERule() {
		return gaNavajoExpression.getTRUERule();
	} 

	//terminal FALSE:
	//	"false" | "FALSE";
	public TerminalRule getFALSERule() {
		return gaNavajoExpression.getFALSERule();
	} 

	//terminal NULL:
	//	"null" | "NULL";
	public TerminalRule getNULLRule() {
		return gaNavajoExpression.getNULLRule();
	} 

	//terminal TODAY:
	//	"today" | "TODAY";
	public TerminalRule getTODAYRule() {
		return gaNavajoExpression.getTODAYRule();
	} 

	//terminal FORALL:
	//	"FORALL";
	public TerminalRule getFORALLRule() {
		return gaNavajoExpression.getFORALLRule();
	} 

	//terminal PARENT:
	//	"..";
	public TerminalRule getPARENTRule() {
		return gaNavajoExpression.getPARENTRule();
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return gaNavajoExpression.getATRule();
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return gaNavajoExpression.getCOLONRule();
	} 

	//terminal NOT:
	//	"!";
	public TerminalRule getNOTRule() {
		return gaNavajoExpression.getNOTRule();
	} 

	//terminal XMLESCAPED:
	//	"&" ID ";";
	public TerminalRule getXMLESCAPEDRule() {
		return gaNavajoExpression.getXMLESCAPEDRule();
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'" | "<![CDATA["->"]]>";
	public TerminalRule getLITERALSTRINGRule() {
		return gaNavajoExpression.getLITERALSTRINGRule();
	} 

	//terminal SQBRACKET_OPEN:
	//	"[";
	public TerminalRule getSQBRACKET_OPENRule() {
		return gaNavajoExpression.getSQBRACKET_OPENRule();
	} 

	//terminal SQBRACKET_CLOSE:
	//	"]";
	public TerminalRule getSQBRACKET_CLOSERule() {
		return gaNavajoExpression.getSQBRACKET_CLOSERule();
	} 

	//terminal TML_SEPARATOR:
	//	"/";
	public TerminalRule getTML_SEPARATORRule() {
		return gaNavajoExpression.getTML_SEPARATORRule();
	} 

	//terminal TML_EXISTS:
	//	"?";
	public TerminalRule getTML_EXISTSRule() {
		return gaNavajoExpression.getTML_EXISTSRule();
	} 

	//terminal DOLLAR:
	//	"$";
	public TerminalRule getDOLLARRule() {
		return gaNavajoExpression.getDOLLARRule();
	} 

	//terminal BRACKET_OPEN:
	//	"(";
	public TerminalRule getBRACKET_OPENRule() {
		return gaNavajoExpression.getBRACKET_OPENRule();
	} 

	//terminal BRACKET_CLOSE:
	//	")";
	public TerminalRule getBRACKET_CLOSERule() {
		return gaNavajoExpression.getBRACKET_CLOSERule();
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return gaNavajoExpression.getCOMMARule();
	} 

	//terminal AND:
	//	"AND";
	public TerminalRule getANDRule() {
		return gaNavajoExpression.getANDRule();
	} 

	//terminal OR:
	//	"OR";
	public TerminalRule getORRule() {
		return gaNavajoExpression.getORRule();
	} 

	//terminal HASH:
	//	"#";
	public TerminalRule getHASHRule() {
		return gaNavajoExpression.getHASHRule();
	} 

	//terminal CURLYOPEN:
	//	"{";
	public TerminalRule getCURLYOPENRule() {
		return gaNavajoExpression.getCURLYOPENRule();
	} 

	//terminal CURLYCLOSE:
	//	"}";
	public TerminalRule getCURLYCLOSERule() {
		return gaNavajoExpression.getCURLYCLOSERule();
	} 

	//terminal EQUALSEQUALS:
	//	"==";
	public TerminalRule getEQUALSEQUALSRule() {
		return gaNavajoExpression.getEQUALSEQUALSRule();
	} 

	//terminal NEQUALS:
	//	"!=";
	public TerminalRule getNEQUALSRule() {
		return gaNavajoExpression.getNEQUALSRule();
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return gaNavajoExpression.getPLUSRule();
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return gaNavajoExpression.getMINUSRule();
	} 

	//terminal MULTIPLY:
	//	"*";
	public TerminalRule getMULTIPLYRule() {
		return gaNavajoExpression.getMULTIPLYRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaNavajoExpression.getIDRule();
	} 

	//AnyExpression:
	//	XML_GT | XML_LT | XML_GTEQ | XML_LTEQ | DOT | NUMBER | BADNUMBER | WS | TRUE | FALSE | NULL | TODAY | FORALL | PARENT
	//	| AT | COLON | NOT | LITERALSTRING | SQBRACKET_CLOSE | SQBRACKET_OPEN | TML_SEPARATOR | TML_EXISTS | DOLLAR |
	//	BRACKET_OPEN | BRACKET_CLOSE | COMMA | AND | OR | HASH | CURLYOPEN | CURLYCLOSE | EQUALSEQUALS | NEQUALS | PLUS |
	//	MINUS | MULTIPLY | ID | XMLESCAPED | ";" | "&";
	public NavajoExpressionGrammarAccess.AnyExpressionElements getAnyExpressionAccess() {
		return gaNavajoExpression.getAnyExpressionAccess();
	}
	
	public ParserRule getAnyExpressionRule() {
		return getAnyExpressionAccess().getRule();
	}

	//// skipped url, image, points, datepattern, password
	//PathElement returns ecore::EString:
	//	ID | DOT | PARENT | TML_SEPARATOR;
	public NavajoExpressionGrammarAccess.PathElementElements getPathElementAccess() {
		return gaNavajoExpression.getPathElementAccess();
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//TmlExpression returns TmlReference:
	//	SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
	//	SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.TmlExpressionElements getTmlExpressionAccess() {
		return gaNavajoExpression.getTmlExpressionAccess();
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ExistsTmlReference:
	//	TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
	//	elements+=PathElement)* SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return gaNavajoExpression.getExistsTmlExpressionAccess();
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//MapReferenceParams returns ReferenceParams:
	//	BRACKET_OPEN getterParams+=Literal (COMMA getterParams+=Literal)* BRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.MapReferenceParamsElements getMapReferenceParamsAccess() {
		return gaNavajoExpression.getMapReferenceParamsAccess();
	}
	
	public ParserRule getMapReferenceParamsRule() {
		return getMapReferenceParamsAccess().getRule();
	}

	//MapGetReference:
	//	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?;
	public NavajoExpressionGrammarAccess.MapGetReferenceElements getMapGetReferenceAccess() {
		return gaNavajoExpression.getMapGetReferenceAccess();
	}
	
	public ParserRule getMapGetReferenceRule() {
		return getMapGetReferenceAccess().getRule();
	}

	//OrExpression returns Expression:
	//	parameters+=AndExpression (operations+=OR parameters+=AndExpression)*;
	public NavajoExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaNavajoExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	parameters+=EqualityExpression (operations+=AND parameters+=EqualityExpression)*;
	public NavajoExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaNavajoExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	parameters+=RelationalExpression (operations+=EQUALSEQUALS parameters+=RelationalExpression | operations+=NEQUALS
	//	parameters+=RelationalExpression)?;
	public NavajoExpressionGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaNavajoExpression.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	//RelationalExpression returns Expression:
	//	{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
	//	parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
	//	parameters+=AdditiveExpression)?;
	public NavajoExpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaNavajoExpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	parameters+=MultiplicativeExpression (PLUS parameters+=MultiplicativeExpression | MINUS
	//	parameters+=MultiplicativeExpression)*;
	public NavajoExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaNavajoExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	parameters+=UnaryExpression (operations+=MULTIPLY parameters+=UnaryExpression | operations+=TML_SEPARATOR
	//	parameters+=UnaryExpression)*;
	public NavajoExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaNavajoExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	(NOT parameters+=PrimaryExpression | MINUS parameters+=PrimaryExpression) | PrimaryExpression;
	public NavajoExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaNavajoExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	parameters+=Literal | BRACKET_OPEN parameters+=OrExpression BRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaNavajoExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Keep this one in place so it will create a node for the code completion
	//FunctionName:
	//	ID;
	public NavajoExpressionGrammarAccess.FunctionNameElements getFunctionNameAccess() {
		return gaNavajoExpression.getFunctionNameAccess();
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	name=FunctionName BRACKET_OPEN parameters+=OrExpression? (COMMA parameters+=OrExpression)* BRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaNavajoExpression.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//DateLiteral returns Expression:
	//	{Expression} NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER;
	public NavajoExpressionGrammarAccess.DateLiteralElements getDateLiteralAccess() {
		return gaNavajoExpression.getDateLiteralAccess();
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//Literal returns Expression:
	//	{Expression} NUMBER | valueString=LITERALSTRING | operations+=FORALL BRACKET_OPEN valueString=LITERALSTRING COMMA
	//	parameters+=OrExpression BRACKET_CLOSE | parameters+=FunctionCall | expressionType=CURLYOPEN parameters+=OrExpression?
	//	(COMMA parameters+=OrExpression)* CURLYCLOSE | elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE |
	//	parameters+=TmlExpression | parameters+=ExistsTmlExpression | parameters+=MapGetReference | parameters+=DateLiteral;
	public NavajoExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaNavajoExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
