
/*
* generated by Xtext
*/
lexer grammar InternalTslLexer;


@header {
package com.dexels.navajo.dsl.tsl.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




KEYWORD_1 : ';';



RULE_XMLHEAD : '<?' ( options {greedy=false;} : . )*'?>';

RULE_XMLCOMMENT : '<!--' ( options {greedy=false;} : . )*'-->';

RULE_LT : '<';

RULE_LTNAVASCRIPTTAG : '<navascript';

RULE_LTSNAVASCRIPTTAG : '</navascript';

RULE_LTTSLTAG : '<tsl';

RULE_LTSTSLTAG : '</tsl';

RULE_QUOTE : '"';

RULE_NAMEEQ : 'name=';

RULE_NOTESEQ : 'notes=';

RULE_IDEQ : 'id=';

RULE_REPOSITORYEQ : 'repository=';

RULE_AUTHOREQ : 'author=';

RULE_XMLNS : 'xmlns';

RULE_SCHEMALOCATIONEQ : 'schemaLocation=';

RULE_NONAMESPACESCHEMALOCATIONEQ : 'noNamespaceSchemaLocation=';

RULE_TYPEEQ : 'type=';

RULE_MODEEQ : 'mode=';

RULE_SCRIPTEQ : 'script=';

RULE_CONDITIONEQ : 'condition=';

RULE_FILTEREQ : 'filter=';

RULE_OBJECTEQ : 'object=';

RULE_COUNTEQ : 'count=';

RULE_REFEQ : 'ref=';

RULE_LENGTHEQ : 'length=';

RULE_CARDINALITYEQ : 'cardinality=';

RULE_SUBTYPESEQ : 'subtypes=';

RULE_DIRECTIONEQ : 'direction=';

RULE_DESCRIPTIONEQ : 'description=';

RULE_CODEEQ : 'code=';

RULE_VALUEEQ : 'value=';

RULE_XMLSPACE : 'xml:space';

RULE_PRESERVE : 'preserve';

RULE_COMMENTEQ : 'comment=';

RULE_LTCOMMENT : '<comment';

RULE_LTSCOMMENT : '</comment';

RULE_XML_START_ENDTAG : '</';

RULE_GT : '>';

RULE_XML_TAG_SINGLEEND : '/>';

RULE_LTINCLUDETAG : '<include';

RULE_LTSINCLUDETAG : '</include';

RULE_LTPROPERTYTAG : '<property';

RULE_LTSPROPERTYTAG : '</property';

RULE_LTREQUIREDTAG : '<required';

RULE_LTSREQUIREDTAG : '</required';

RULE_LTVALIDATIONSTAG : '<validations';

RULE_LTSVALIDATIONSTAG : '</validations';

RULE_LTCHECKTAG : '<check';

RULE_LTSCHECKTAG : '</check';

RULE_LTBREAKTAG : '<break';

RULE_LTSBREAKTAG : '</break';

RULE_LTOPTIONTAG : '<option';

RULE_LTSOPTIONTAG : '</option';

RULE_EQUALS : '=';

RULE_LTEXPRESSION_TAG : '<expression';

RULE_EXPRESSION_END_TAG : '</expression' RULE_GT;

RULE_LTPARAMTAG : '<param';

RULE_LTSPARAMTAG : '</param';

RULE_MESSAGEEQ : 'message=';

RULE_LTMESSAGETAG : '<message';

RULE_LTSMESSAGETAG : '</message';

RULE_LTMETHODTAG : '<method';

RULE_LTSMETHODTAG : '</method';

RULE_LTMETHODSTAG : '<methods';

RULE_LTSMETHODSTAG : '</methods';

RULE_LTFIELDTAG : '<field';

RULE_LTSFIELDTAG : '</field';

RULE_LTDEBUG_TAG : '<debug';

RULE_LTSDEBUG_TAG : '</debug';

RULE_NAVASCRIPT_END : (RULE_LTSNAVASCRIPTTAG RULE_GT|RULE_LTSTSLTAG RULE_GT);

RULE_XML_GT : '&gt;';

RULE_XML_LT : '&lt;';

RULE_XML_GTEQ : '&gt;=';

RULE_XML_LTEQ : '&lt;=';

RULE_DOT : '.';

RULE_NUMBER : ('0'..'9')+ (RULE_DOT ('0'..'9')+)?;

RULE_BADNUMBER : ('0'..'9')+ RULE_DOT;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TRUE : ('true'|'TRUE');

RULE_FALSE : ('false'|'FALSE');

RULE_NULL : ('null'|'NULL');

RULE_TODAY : ('today'|'TODAY');

RULE_FORALL : 'FORALL';

RULE_PARENT : '..';

RULE_AT : '@';

RULE_COLON : ':';

RULE_NOT : '!';

RULE_XMLESCAPED : '&' RULE_ID ';';

RULE_LITERALSTRING : ('\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\''|'<![CDATA[' ( options {greedy=false;} : . )*']]>');

RULE_SQBRACKET_OPEN : '[';

RULE_SQBRACKET_CLOSE : ']';

RULE_TML_SEPARATOR : '/';

RULE_TML_EXISTS : '?';

RULE_DOLLAR : '$';

RULE_BRACKET_OPEN : '(';

RULE_BRACKET_CLOSE : ')';

RULE_COMMA : ',';

RULE_AND : 'AND';

RULE_OR : 'OR';

RULE_HASH : '#';

RULE_CURLYOPEN : '{';

RULE_CURLYCLOSE : '}';

RULE_EQUALSEQUALS : '==';

RULE_NEQUALS : '!=';

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_MULTIPLY : '*';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;



