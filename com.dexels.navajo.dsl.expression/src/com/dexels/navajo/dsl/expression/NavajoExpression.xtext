grammar com.dexels.navajo.dsl.expression.NavajoExpression   hidden(WS)

import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


TopLevel returns TopLevel: 
		toplevelExpression=OrExpression
 	;


 
terminal XML_GT: '&gt;';
terminal XML_LT: '&lt;';
terminal XML_GTEQ: '&gt;=';
terminal XML_LTEQ: '&lt;=';

terminal DOT: '.';
terminal NUMBER returns ecore::EBigDecimal:
  ('0'..'9')+ (DOT ('0'..'9')+)?;
terminal BADNUMBER:
	('0'..'9')+ DOT
;

terminal WS			: (' '|'\t'|'\r'|'\n')+;
terminal TRUE: 'true' | 'TRUE';
terminal FALSE: 'false' | 'FALSE';
terminal NULL: 'null' | 'NULL';
terminal TODAY: 'today' | 'TODAY';
terminal FORALL: 'FORALL';
terminal PARENT: "..";
	
terminal AT: '@';	
terminal COLON: ':';
terminal NOT: '!';

terminal XMLESCAPED: '&' ID ';';

terminal LITERALSTRING returns ecore::EString: 
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
			| 	'<![CDATA[' -> ']]>'
	;
	

terminal SQBRACKET_OPEN:
	'[';
	
terminal SQBRACKET_CLOSE:
	']';

terminal TML_SEPARATOR:
	'/';

terminal TML_EXISTS:
	'?';
	
terminal DOLLAR:
	'$';
	
terminal BRACKET_OPEN:
	'('
;

terminal BRACKET_CLOSE:
	')'
;

terminal COMMA:
	','
;

terminal AND:
	'AND'
;

terminal OR:
	'OR'
;

terminal HASH:
	'#'
;
terminal CURLYOPEN:
	'{'
;
terminal CURLYCLOSE:
	'}'
;
terminal EQUALSEQUALS:
	'=='
;
terminal NEQUALS:
	'!='
;

terminal PLUS:
	'+'
;
terminal MINUS:
	'-'
;
terminal MULTIPLY:
	'*'
;

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

AnyExpression:
	(XML_GT|XML_LT|XML_GTEQ|XML_LTEQ|DOT|NUMBER|BADNUMBER|WS|TRUE|FALSE|NULL|TODAY|FORALL|PARENT|AT|COLON|NOT|LITERALSTRING|SQBRACKET_CLOSE|SQBRACKET_OPEN|TML_SEPARATOR|TML_EXISTS|DOLLAR|BRACKET_OPEN|BRACKET_CLOSE|COMMA|AND|OR|HASH|CURLYOPEN|CURLYCLOSE|EQUALSEQUALS|NEQUALS|PLUS|MINUS|MULTIPLY|ID|XMLESCAPED|';')
;

// skipped url, image, points, datepattern, password

PathElement returns ecore::EString:
	(ID|DOT|PARENT|TML_SEPARATOR)
	;
	


TmlExpression returns TmlReference:
	SQBRACKET_OPEN (absolute?=TML_SEPARATOR)? (param?=AT)? elements+=PathElement (TML_SEPARATOR elements+=PathElement)* SQBRACKET_CLOSE
;

ExistsTmlExpression returns ExistsTmlReference: 
	TML_EXISTS SQBRACKET_OPEN (absolute?=TML_SEPARATOR)? (param?=AT)? elements+=PathElement (TML_SEPARATOR elements+=PathElement)* SQBRACKET_CLOSE
;

MapReferenceParams returns ReferenceParams: 
	BRACKET_OPEN (getterParams+=Literal) (COMMA getterParams+=Literal)* BRACKET_CLOSE
;

MapGetReference returns MapGetReference: 
	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID  (referenceParams=MapReferenceParams)?
;
   
OrExpression returns Expression:
    parameters+=AndExpression (operations+= OR parameters+=AndExpression )*;
    
AndExpression returns Expression:
     parameters+=EqualityExpression (operations+= AND parameters+=EqualityExpression )*
     ;  

EqualityExpression returns Expression: 
     parameters+=RelationalExpression ((operations+= EQUALSEQUALS parameters+=RelationalExpression) | (operations+=NEQUALS parameters+=RelationalExpression))?
;     
  
// Skipped for now. Trouble with overloaded '<' stuff  
RelationalExpression returns Expression: 
   {Expression} parameters+=AdditiveExpression ((operations+=XML_LT parameters+=AdditiveExpression)|(operations+=XML_GT parameters+=AdditiveExpression)|(operations+=XML_LTEQ parameters+=AdditiveExpression)|(operations+=XML_GTEQ parameters+=AdditiveExpression))?
    ;
AdditiveExpression returns Expression:
      parameters+=MultiplicativeExpression ((PLUS parameters+=MultiplicativeExpression ) | (MINUS parameters+=MultiplicativeExpression))*
	;
	
MultiplicativeExpression returns Expression: 
      parameters+=UnaryExpression ((operations+=MULTIPLY parameters+=UnaryExpression ) |  (operations+=TML_SEPARATOR parameters+=UnaryExpression ))*
	;
	
UnaryExpression returns Expression:
	(
		NOT parameters+=PrimaryExpression 
		| MINUS parameters+=PrimaryExpression
	)
	| PrimaryExpression;	

PrimaryExpression returns Expression:
   	parameters+=Literal
	| BRACKET_OPEN parameters+=OrExpression BRACKET_CLOSE
;	

// Keep this one in place so it will create a node for the code completion
FunctionName:
	ID;

FunctionCall returns FunctionCall:
	name=FunctionName BRACKET_OPEN (parameters+=OrExpression)? (COMMA parameters+=OrExpression)*  BRACKET_CLOSE
;

DateLiteral returns Expression:
{Expression}
	NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER HASH NUMBER
;

Literal returns Expression:
  {Expression}NUMBER
  | valueString= LITERALSTRING
  | operations+=FORALL BRACKET_OPEN valueString=LITERALSTRING COMMA parameters+=OrExpression BRACKET_CLOSE
  | parameters+=FunctionCall
  | expressionType=CURLYOPEN (parameters+=OrExpression)?  (COMMA parameters+=OrExpression)* CURLYCLOSE
  | elements+=NULL
  | elements+=TODAY 
  | elements+=TRUE
  | elements+=FALSE
  | parameters+=TmlExpression
  | parameters+=ExistsTmlExpression
  | parameters+=MapGetReference
  | parameters+=DateLiteral
  ;
